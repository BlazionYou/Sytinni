// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace UtinniCore
{
    namespace Utinni
    {
        namespace Log
        {
            public unsafe partial class log
            {
                public partial struct __Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?critical@log@utinni@@YAXPBD@Z")]
                    internal static extern void Critical([MarshalAs(UnmanagedType.LPUTF8Str)] string text);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?debug@log@utinni@@YAXPBD@Z")]
                    internal static extern void Debug([MarshalAs(UnmanagedType.LPUTF8Str)] string text);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?error@log@utinni@@YAXPBD@Z")]
                    internal static extern void Error([MarshalAs(UnmanagedType.LPUTF8Str)] string text);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?info@log@utinni@@YAXPBD@Z")]
                    internal static extern void Info([MarshalAs(UnmanagedType.LPUTF8Str)] string text);
                }

                public static void Critical(string text)
                {
                    __Internal.Critical(text);
                }

                public static void Debug(string text)
                {
                    __Internal.Debug(text);
                }

                public static void Error(string text)
                {
                    __Internal.Error(text);
                }

                public static void Info(string text)
                {
                    __Internal.Info(text);
                }
            }
        }
    }

    namespace INI
    {
        namespace RefCountPtr
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public unsafe partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vfptr_RefCountPtr;

                [FieldOffset(4)]
                internal global::System.IntPtr _ptr;
            }

            namespace Refcont
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public unsafe partial struct __Internalc__N_INI_S_RefCountPtr____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C
                {
                    [FieldOffset(0)]
                    internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C val;

                    [FieldOffset(24)]
                    internal uint count;
                }
            }

        }

        /// <summary>stream to be used for conversions</summary>
        public unsafe partial class Convstream : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 176)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vbptr_basic_istream;

                [FieldOffset(8)]
                internal long _Chcount;

                [FieldOffset(16)]
                internal global::System.IntPtr vbptr_basic_ostream;

                [FieldOffset(24)]
                internal global::Std.BasicStringbuf.__Internalc__N_std_S_basic_stringbuf__C___N_std_S_char_traits__C___N_std_S_allocator__C _Stringbuffer;

                [FieldOffset(100)]
                internal global::System.IntPtr vtordisp_convstream;

                [FieldOffset(104)]
                internal global::System.IntPtr vfptr_ios_base;

                [FieldOffset(112)]
                internal uint _Stdstr;

                [FieldOffset(116)]
                internal int _Mystate;

                [FieldOffset(120)]
                internal int _Except;

                [FieldOffset(124)]
                internal int _Fmtfl;

                [FieldOffset(128)]
                internal long _Prec;

                [FieldOffset(136)]
                internal long _Wide;

                [FieldOffset(144)]
                internal global::System.IntPtr _Arr;

                [FieldOffset(148)]
                internal global::System.IntPtr _Calls;

                [FieldOffset(152)]
                internal global::System.IntPtr _Ploc;

                [FieldOffset(160)]
                internal global::System.IntPtr _Mystrbuf;

                [FieldOffset(164)]
                internal global::System.IntPtr _Tiestr;

                [FieldOffset(168)]
                internal sbyte _Fillch;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0convstream@INI@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Convstream> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Convstream>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.Convstream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Convstream(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.Convstream __CreateInstance(global::UtinniCore.INI.Convstream.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Convstream(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.Convstream.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Convstream.__Internal));
                *(global::UtinniCore.INI.Convstream.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Convstream(global::UtinniCore.INI.Convstream.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Convstream(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public Convstream()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Convstream.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Convstream");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.Convstream __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((global::UtinniCore.INI.Convstream.__Internal*) __Instance)->vbptr_basic_istream = new global::System.IntPtr(__OriginalVTables[0]);
                ((global::UtinniCore.INI.Convstream.__Internal*) __Instance)->vbptr_basic_ostream = new global::System.IntPtr(__OriginalVTables[1]);
                ((global::UtinniCore.INI.Convstream.__Internal*) __Instance)->vtordisp_convstream = new global::System.IntPtr(__OriginalVTables[2]);
                ((global::UtinniCore.INI.Convstream.__Internal*) __Instance)->vfptr_ios_base = new global::System.IntPtr(__OriginalVTables[3]);
                if (disposing)
                {
                    var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                    var ___dtorDelegate = (global::UtinniCore.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UtinniCore.Delegates.Action_IntPtr_int));
                    ___dtorDelegate(__Instance, 0);
                }
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            #region Virtual table interop

            // convstream
            private static global::UtinniCore.Delegates.Action_IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(global::System.IntPtr __instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(__instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (global::UtinniCore.INI.Convstream) NativeToManagedMap[__instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(true);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;
            private static void*[] __originalVTables;
            protected internal virtual void*[] __OriginalVTables => __originalVTables ?? new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 16), *(void**) (__Instance + 100), *(void**) (__Instance + 104) };
            private void SetupVTables(bool destructorOnly = false)
            {
                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtorDelegateInstance += _dtorDelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();

                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr_dtor0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr_dtor0.ToPointer();
                    *(void**) (vfptr_dtor0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr_dtor0 + 4) = _Thunks[0];

                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];

                    __originalVTables = new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 16), *(void**) (__Instance + 100), *(void**) (__Instance + 104) };}

                if (destructorOnly)
                {
                    *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                    *(void**) (__Instance + 16) = __ManagedVTablesDtorOnly[1];
                    *(void**) (__Instance + 100) = __ManagedVTablesDtorOnly[2];
                    *(void**) (__Instance + 104) = __ManagedVTablesDtorOnly[3];
                }
                else
                {
                    *(void**) (__Instance + 0) = __ManagedVTables[0];
                    *(void**) (__Instance + 16) = __ManagedVTables[1];
                    *(void**) (__Instance + 100) = __ManagedVTables[2];
                    *(void**) (__Instance + 104) = __ManagedVTables[3];
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Value to be stored in INI-file</para>
        /// <para>This is a simple reference-counting class, storing a pointer to original string</para>
        /// <para>It has some functions for easy converting toother types</para>
        /// <para>Value can contain array (in string representation) and be converted toit</para>
        /// </summary>
        public unsafe partial class Value : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vfptr_Value;

                [FieldOffset(4)]
                internal global::UtinniCore.INI.RefCountPtr.__Internal _val;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Value@INI@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Value@INI@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr cp);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Value@INI@@QAE@PBD@Z")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??8Value@INI@@QBE_NABV01@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr rgh);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??9Value@INI@@QBE_NABV01@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??MValue@INI@@QBE_NABV01@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorLess(global::System.IntPtr __instance, global::System.IntPtr rgh);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Set@Value@INI@@QAEXPBD@Z")]
                internal static extern void Set(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??$Set@VArray@INI@@@Value@INI@@QAEXABVArray@1@@Z")]
                internal static extern void Set(global::System.IntPtr __instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??$Set@VMap@INI@@@Value@INI@@QAEXABVMap@1@@Z")]
                internal static extern void Set_1(global::System.IntPtr __instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??$Get@VMap@INI@@@Value@INI@@QBE?AVMap@1@XZ")]
                internal static extern void Get(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsString@Value@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern void AsString(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsInt@Value@INI@@QBEHXZ")]
                internal static extern int AsInt(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsDouble@Value@INI@@QBENXZ")]
                internal static extern double AsDouble(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsBool@Value@INI@@QBE_NXZ")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool AsBool(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsArray@Value@INI@@QBE?AVArray@2@XZ")]
                internal static extern void AsArray(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?AsMap@Value@INI@@QBE?AVMap@2@XZ")]
                internal static extern void AsMap(global::System.IntPtr __instance, global::System.IntPtr @return);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Value> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Value>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.Value __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Value(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.Value __CreateInstance(global::UtinniCore.INI.Value.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Value(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.Value.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Value.__Internal));
                global::UtinniCore.INI.Value.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Value(global::UtinniCore.INI.Value.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Value(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public Value()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Value.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Value");
            }

            public Value(global::UtinniCore.INI.Value cp)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Value.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(cp, null))
                    throw new global::System.ArgumentNullException("cp", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = cp.__Instance;
                __Internal.cctor(__Instance, __arg0);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Value");
            }

            public Value(string value)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Value.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance, value);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Value");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.Value __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((global::UtinniCore.INI.Value.__Internal*) __Instance)->vfptr_Value = new global::System.IntPtr(__OriginalVTables[0]);
                if (disposing)
                {
                    var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                    var ___dtorDelegate = (global::UtinniCore.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UtinniCore.Delegates.Action_IntPtr_int));
                    ___dtorDelegate(__Instance, 0);
                }
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator ==(global::UtinniCore.INI.Value __op, global::UtinniCore.INI.Value rgh)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool rghNull = ReferenceEquals(rgh, null);
                if (__opNull || rghNull)
                    return __opNull && rghNull;
                var __arg0 = __op.__Instance;
                var __arg1 = rgh.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::UtinniCore.INI.Value;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::UtinniCore.INI.Value.__Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(global::UtinniCore.INI.Value __op, global::UtinniCore.INI.Value val)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool valNull = ReferenceEquals(val, null);
                if (__opNull || valNull)
                    return !(__opNull && valNull);
                var __arg0 = __op.__Instance;
                var __arg1 = val.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator >(global::UtinniCore.INI.Value __op, global::UtinniCore.INI.Value rgh)
            {
                return !(__op < rgh);
            }

            public static bool operator <(global::UtinniCore.INI.Value __op, global::UtinniCore.INI.Value rgh)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = __op.__Instance;
                if (ReferenceEquals(rgh, null))
                    throw new global::System.ArgumentNullException("rgh", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = rgh.__Instance;
                var __ret = __Internal.OperatorLess(__arg0, __arg1);
                return __ret;
            }

            public void Set(string value)
            {
                __Internal.Set(__Instance, value);
            }

            public void Set(global::UtinniCore.INI.Array value)
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.Set(__Instance, __arg0);
            }

            public void Set(global::UtinniCore.INI.Map value)
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.Set_1(__Instance, __arg0);
            }

            public global::UtinniCore.INI.Map Get()
            {
                var __ret = new global::UtinniCore.INI.Map.__Internal();
                __Internal.Get(__Instance, new IntPtr(&__ret));
                return global::UtinniCore.INI.Map.__CreateInstance(__ret);
            }

            public static implicit operator global::UtinniCore.INI.Value(string value)
            {
                return new global::UtinniCore.INI.Value(value);
            }

            /// <summary>Converts Value to std::string</summary>
            public string AsString
            {
                get
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.AsString(__Instance, new IntPtr(&__ret));
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            /// <summary>Converts Value to integer</summary>
            public int AsInt
            {
                get
                {
                    var __ret = __Internal.AsInt(__Instance);
                    return __ret;
                }
            }

            /// <summary>Converts Value to double</summary>
            public double AsDouble
            {
                get
                {
                    var __ret = __Internal.AsDouble(__Instance);
                    return __ret;
                }
            }

            /// <summary>Converts Value to boolean</summary>
            public bool AsBool
            {
                get
                {
                    var __ret = __Internal.AsBool(__Instance);
                    return __ret;
                }
            }

            /// <summary>Converts Value to Array</summary>
            public global::UtinniCore.INI.Array AsArray
            {
                get
                {
                    var __ret = new global::UtinniCore.INI.Array.__Internal();
                    __Internal.AsArray(__Instance, new IntPtr(&__ret));
                    return global::UtinniCore.INI.Array.__CreateInstance(__ret);
                }
            }

            /// <summary>Converts Value to Map</summary>
            public global::UtinniCore.INI.Map AsMap
            {
                get
                {
                    var __ret = new global::UtinniCore.INI.Map.__Internal();
                    __Internal.AsMap(__Instance, new IntPtr(&__ret));
                    return global::UtinniCore.INI.Map.__CreateInstance(__ret);
                }
            }

            #region Virtual table interop

            // virtual ~Value() {}
            private static global::UtinniCore.Delegates.Action_IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(global::System.IntPtr __instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(__instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (global::UtinniCore.INI.Value) NativeToManagedMap[__instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(true);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;
            private static void*[] __originalVTables;
            protected internal virtual void*[] __OriginalVTables => __originalVTables ?? new void*[] { *(void**) (__Instance + 0) };
            private void SetupVTables(bool destructorOnly = false)
            {
                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtorDelegateInstance += _dtorDelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();

                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr_dtor0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr_dtor0.ToPointer();
                    *(void**) (vfptr_dtor0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr_dtor0 + 4) = _Thunks[0];

                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];

                    __originalVTables = new void*[] { *(void**) (__Instance + 0) };}

                if (destructorOnly)
                {
                    *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(void**) (__Instance + 0) = __ManagedVTables[0];
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Array of Values</para>
        /// <para>Reference-counting class</para>
        /// </summary>
        public unsafe partial class Array : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vfptr_Array;

                [FieldOffset(4)]
                internal global::UtinniCore.INI.RefCountPtr.__Internal _val;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Array@INI@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Array@INI@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr cp);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Array@INI@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDD@Z")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetValue@Array@INI@@QBE?AVValue@2@IABV32@@Z")]
                internal static extern void GetValue(global::System.IntPtr __instance, global::System.IntPtr @return, uint pos, global::System.IntPtr def_val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetValue@Array@INI@@QAEXIABVValue@2@@Z")]
                internal static extern void SetValue(global::System.IntPtr __instance, uint pos, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?PushBack@Array@INI@@QAEAAV12@ABVValue@2@@Z")]
                internal static extern global::System.IntPtr PushBack(global::System.IntPtr __instance, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ToString@Array@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDD@Z")]
                internal static extern void ToString(global::System.IntPtr __instance, global::System.IntPtr @return, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FromString@Array@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDD@Z")]
                internal static extern void FromString(global::System.IntPtr __instance, global::System.IntPtr str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ToValue@Array@INI@@QBE?AVValue@2@XZ")]
                internal static extern void ToValue(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FromValue@Array@INI@@QAEXABVValue@2@@Z")]
                internal static extern void FromValue(global::System.IntPtr __instance, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??AArray@INI@@QAEAAVValue@1@I@Z")]
                internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr __instance, uint pos);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Size@Array@INI@@QBEIXZ")]
                internal static extern uint Size(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Array> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Array>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.Array __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Array(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.Array __CreateInstance(global::UtinniCore.INI.Array.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Array(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.Array.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Array.__Internal));
                global::UtinniCore.INI.Array.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Array(global::UtinniCore.INI.Array.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Array(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public Array()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Array.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Array");
            }

            public Array(global::UtinniCore.INI.Array cp)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Array.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(cp, null))
                    throw new global::System.ArgumentNullException("cp", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = cp.__Instance;
                __Internal.cctor(__Instance, __arg0);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Array");
            }

            public Array(string str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Array.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.ctor(__Instance, __arg0, sep, seg_open, seg_close, esc);
                __basicString0.Dispose();
                SetupVTables(GetType().FullName == "UtinniCore.INI.Array");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.Array __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((global::UtinniCore.INI.Array.__Internal*) __Instance)->vfptr_Array = new global::System.IntPtr(__OriginalVTables[0]);
                if (disposing)
                {
                    var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                    var ___dtorDelegate = (global::UtinniCore.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UtinniCore.Delegates.Action_IntPtr_int));
                    ___dtorDelegate(__Instance, 0);
                }
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary>Gets value with specified position</summary>
            /// <param name="pos">If</param>
            /// <param name="pos">is &gt;= Size() returns</param>
            public global::UtinniCore.INI.Value GetValue(uint pos, global::UtinniCore.INI.Value def_val)
            {
                if (ReferenceEquals(def_val, null))
                    throw new global::System.ArgumentNullException("def_val", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = def_val.__Instance;
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.GetValue(__Instance, new IntPtr(&__ret), pos, __arg1);
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>Sets value</summary>
            /// <param name="value">to specified position</param>
            /// <param name="pos">Array is automatically widen (if needed) to allow this operation</param>
            public void SetValue(uint pos, global::UtinniCore.INI.Value value)
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = value.__Instance;
                __Internal.SetValue(__Instance, pos, __arg1);
            }

            /// <summary>Adds</summary>
            /// <param name="val">to the end of the Array</param>
            public global::UtinniCore.INI.Array PushBack(global::UtinniCore.INI.Value val)
            {
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = val.__Instance;
                var __ret = __Internal.PushBack(__Instance, __arg0);
                global::UtinniCore.INI.Array __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Array.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Array) global::UtinniCore.INI.Array.NativeToManagedMap[__ret];
                else global::UtinniCore.INI.Array.NativeToManagedMap[__ret] = __result0 = (global::UtinniCore.INI.Array) global::UtinniCore.INI.Array.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>Formats string with all values of this array represented as strings, separated by</summary>
            public string ToString(sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc)
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.ToString(__Instance, new IntPtr(&__ret), sep, seg_open, seg_close, esc);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            /// <summary>Fills array with values from string</summary>
            /// <param name="str,">separated by</param>
            public void FromString(string str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte esc)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.FromString(__Instance, __arg0, sep, seg_open, seg_close, esc);
                __basicString0.Dispose();
            }

            /// <summary>Converts Array to Value</summary>
            public global::UtinniCore.INI.Value ToValue()
            {
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.ToValue(__Instance, new IntPtr(&__ret));
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>Gets Array from Value</summary>
            public void FromValue(global::UtinniCore.INI.Value val)
            {
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = val.__Instance;
                __Internal.FromValue(__Instance, __arg0);
            }

            public global::UtinniCore.INI.Value this[uint pos]
            {
                get
                {
                    var __ret = __Internal.OperatorSubscript(__Instance, pos);
                    return global::UtinniCore.INI.Value.__CreateInstance(__ret);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    global::UtinniCore.INI.Value.__Internal.cctor(global::UtinniCore.INI.Array.__Internal.OperatorSubscript(__Instance, pos), value.__Instance);
                }
            }

            /// <summary>Returns array size</summary>
            public uint Size
            {
                get
                {
                    var __ret = __Internal.Size(__Instance);
                    return __ret;
                }
            }

            #region Virtual table interop

            // virtual ~Array() {}
            private static global::UtinniCore.Delegates.Action_IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(global::System.IntPtr __instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(__instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (global::UtinniCore.INI.Array) NativeToManagedMap[__instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(true);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;
            private static void*[] __originalVTables;
            protected internal virtual void*[] __OriginalVTables => __originalVTables ?? new void*[] { *(void**) (__Instance + 0) };
            private void SetupVTables(bool destructorOnly = false)
            {
                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtorDelegateInstance += _dtorDelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();

                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr_dtor0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr_dtor0.ToPointer();
                    *(void**) (vfptr_dtor0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr_dtor0 + 4) = _Thunks[0];

                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];

                    __originalVTables = new void*[] { *(void**) (__Instance + 0) };}

                if (destructorOnly)
                {
                    *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(void**) (__Instance + 0) = __ManagedVTables[0];
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Map of Values</para>
        /// <para>Reference-counting class</para>
        /// </summary>
        public unsafe partial class Map : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vfptr_Map;

                [FieldOffset(4)]
                internal global::UtinniCore.INI.RefCountPtr.__Internal _val;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Map@INI@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Map@INI@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr cp);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Map@INI@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDDD@Z")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetValue@Map@INI@@QBE?AVValue@2@ABV32@0@Z")]
                internal static extern void GetValue(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr key, global::System.IntPtr def_val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetValue@Map@INI@@QAEXABVValue@2@0@Z")]
                internal static extern void SetValue(global::System.IntPtr __instance, global::System.IntPtr key, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ToString@Map@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDDD@Z")]
                internal static extern void ToString(global::System.IntPtr __instance, global::System.IntPtr @return, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FromString@Map@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DDDDD@Z")]
                internal static extern void FromString(global::System.IntPtr __instance, global::System.IntPtr str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ToValue@Map@INI@@QBE?AVValue@2@XZ")]
                internal static extern void ToValue(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FromValue@Map@INI@@QAEXABVValue@2@@Z")]
                internal static extern void FromValue(global::System.IntPtr __instance, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??AMap@INI@@QAEAAVValue@1@ABV21@@Z")]
                internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr __instance, global::System.IntPtr key);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Size@Map@INI@@QBEIXZ")]
                internal static extern uint Size(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Map> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Map>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.Map __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Map(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.Map __CreateInstance(global::UtinniCore.INI.Map.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Map(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.Map.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Map.__Internal));
                global::UtinniCore.INI.Map.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Map(global::UtinniCore.INI.Map.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Map(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public Map()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Map.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Map");
            }

            public Map(global::UtinniCore.INI.Map cp)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Map.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(cp, null))
                    throw new global::System.ArgumentNullException("cp", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = cp.__Instance;
                __Internal.cctor(__Instance, __arg0);
                SetupVTables(GetType().FullName == "UtinniCore.INI.Map");
            }

            public Map(string str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Map.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.ctor(__Instance, __arg0, sep, seg_open, seg_close, kval, esc);
                __basicString0.Dispose();
                SetupVTables(GetType().FullName == "UtinniCore.INI.Map");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.Map __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((global::UtinniCore.INI.Map.__Internal*) __Instance)->vfptr_Map = new global::System.IntPtr(__OriginalVTables[0]);
                if (disposing)
                {
                    var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                    var ___dtorDelegate = (global::UtinniCore.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UtinniCore.Delegates.Action_IntPtr_int));
                    ___dtorDelegate(__Instance, 0);
                }
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary>Gets value for specified key</summary>
            /// <param name="key">If there is no specified key - returns</param>
            public global::UtinniCore.INI.Value GetValue(global::UtinniCore.INI.Value key, global::UtinniCore.INI.Value def_val)
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = key.__Instance;
                if (ReferenceEquals(def_val, null))
                    throw new global::System.ArgumentNullException("def_val", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = def_val.__Instance;
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.GetValue(__Instance, new IntPtr(&__ret), __arg0, __arg1);
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>Sets value</summary>
            /// <param name="value">to specified key</param>
            public void SetValue(global::UtinniCore.INI.Value key, global::UtinniCore.INI.Value value)
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = key.__Instance;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = value.__Instance;
                __Internal.SetValue(__Instance, __arg0, __arg1);
            }

            /// <summary>Formats string with all values of this map</summary>
            public string ToString(sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc)
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.ToString(__Instance, new IntPtr(&__ret), sep, seg_open, seg_close, kval, esc);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            /// <summary>Fills map with values from string</summary>
            public void FromString(string str, sbyte sep, sbyte seg_open, sbyte seg_close, sbyte kval, sbyte esc)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.FromString(__Instance, __arg0, sep, seg_open, seg_close, kval, esc);
                __basicString0.Dispose();
            }

            /// <summary>Converts Array to Value</summary>
            public global::UtinniCore.INI.Value ToValue()
            {
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.ToValue(__Instance, new IntPtr(&__ret));
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>Gets Array from Value</summary>
            public void FromValue(global::UtinniCore.INI.Value val)
            {
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = val.__Instance;
                __Internal.FromValue(__Instance, __arg0);
            }

            public global::UtinniCore.INI.Value this[global::UtinniCore.INI.Value key]
            {
                get
                {
                    if (ReferenceEquals(key, null))
                        throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = key.__Instance;
                    var __ret = __Internal.OperatorSubscript(__Instance, __arg0);
                    return global::UtinniCore.INI.Value.__CreateInstance(__ret);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    if (ReferenceEquals(key, null))
                        throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = key.__Instance;
                    global::UtinniCore.INI.Value.__Internal.cctor(global::UtinniCore.INI.Map.__Internal.OperatorSubscript(__Instance, __arg0), value.__Instance);
                }
            }

            /// <summary>Returns map size</summary>
            public uint Size
            {
                get
                {
                    var __ret = __Internal.Size(__Instance);
                    return __ret;
                }
            }

            #region Virtual table interop

            // virtual ~Map(){}
            private static global::UtinniCore.Delegates.Action_IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(global::System.IntPtr __instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(__instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (global::UtinniCore.INI.Map) NativeToManagedMap[__instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(true);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;
            private static void*[] __originalVTables;
            protected internal virtual void*[] __OriginalVTables => __originalVTables ?? new void*[] { *(void**) (__Instance + 0) };
            private void SetupVTables(bool destructorOnly = false)
            {
                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtorDelegateInstance += _dtorDelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();

                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr_dtor0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr_dtor0.ToPointer();
                    *(void**) (vfptr_dtor0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr_dtor0 + 4) = _Thunks[0];

                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];

                    __originalVTables = new void*[] { *(void**) (__Instance + 0) };}

                if (destructorOnly)
                {
                    *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(void**) (__Instance + 0) = __ManagedVTables[0];
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>One section of the ini-file</para>
        /// <para>This can be created by INIFile class only</para>
        /// </summary>
        public unsafe partial class Section : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 68)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr _file;

                [FieldOffset(4)]
                internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C _name;

                [FieldOffset(28)]
                internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C _comment;

                [FieldOffset(52)]
                internal global::Std.Map.__Internalc__N_std_S_map____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_INI_S_Value___N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S3_ _entries;

                [FieldOffset(60)]
                internal global::Std.Map.__Internalc__N_std_S_map____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C_S0____N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S0_ _comments;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Section@INI@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr __instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetValue@Section@INI@@QBE?AVValue@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV32@@Z")]
                internal static extern void GetValue(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr key, global::System.IntPtr def_value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetValue@Section@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@0@Z")]
                internal static extern void SetValue(global::System.IntPtr __instance, global::System.IntPtr key, global::System.IntPtr val, global::System.IntPtr comment);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetArrayValue@Section@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABVValue@2@@Z")]
                internal static extern void SetArrayValue(global::System.IntPtr __instance, global::System.IntPtr key, uint pos, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?RemoveValue@Section@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void RemoveValue(global::System.IntPtr __instance, global::System.IntPtr key);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetComment@Section@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z")]
                internal static extern void GetComment(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr key);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetComment@Section@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z")]
                internal static extern void SetComment(global::System.IntPtr __instance, global::System.IntPtr key, global::System.IntPtr comment);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FindSubSection@Section@INI@@QBEPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr FindSubSection(global::System.IntPtr __instance, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetSubSection@Section@INI@@QAEPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr GetSubSection(global::System.IntPtr __instance, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ValuesSize@Section@INI@@QBEIXZ")]
                internal static extern uint ValuesSize(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FullName@Section@INI@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern global::System.IntPtr FullName(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Name@Section@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern void Name(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Comment@Section@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern void Comment(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FindParent@Section@INI@@QBEPAV12@XZ")]
                internal static extern global::System.IntPtr FindParent(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetParent@Section@INI@@QAEPAV12@XZ")]
                internal static extern global::System.IntPtr GetParent(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Section> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.Section>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.Section __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Section(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.Section __CreateInstance(global::UtinniCore.INI.Section.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.Section(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.Section.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.Section.__Internal));
                *(global::UtinniCore.INI.Section.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Section(global::UtinniCore.INI.Section.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Section(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.Section __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor(__Instance, 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary>Get Value</summary>
            public global::UtinniCore.INI.Value GetValue(string key, global::UtinniCore.INI.Value def_value)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(def_value, null))
                    throw new global::System.ArgumentNullException("def_value", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = def_value.__Instance;
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.GetValue(__Instance, new IntPtr(&__ret), __arg0, __arg1);
                __basicString0.Dispose();
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>Set Value</summary>
            public void SetValue(string key, global::UtinniCore.INI.Value val, string comment)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = val.__Instance;
                var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString2, comment);
                var __arg2 = __basicString2.__Instance;
                __Internal.SetValue(__Instance, __arg0, __arg1, __arg2);
                __basicString0.Dispose();
                __basicString2.Dispose();
            }

            /// <summary>Set Value to array</summary>
            public void SetArrayValue(string key, uint pos, global::UtinniCore.INI.Value val)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg2 = val.__Instance;
                __Internal.SetArrayValue(__Instance, __arg0, pos, __arg2);
                __basicString0.Dispose();
            }

            /// <summary>Remove value</summary>
            public void RemoveValue(string key)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                __Internal.RemoveValue(__Instance, __arg0);
                __basicString0.Dispose();
            }

            /// <summary>Get comment, associated with provided value</summary>
            public string GetComment(string key)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetComment(__Instance, new IntPtr(&__ret), __arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            /// <summary>Set comment for specified key</summary>
            public void SetComment(string key, string comment)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, comment);
                var __arg1 = __basicString1.__Instance;
                __Internal.SetComment(__Instance, __arg0, __arg1);
                __basicString0.Dispose();
                __basicString1.Dispose();
            }

            public global::UtinniCore.INI.Section FindSubSection(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.FindSubSection(__Instance, __arg0);
                __basicString0.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            public global::UtinniCore.INI.Section GetSubSection(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.GetSubSection(__Instance, __arg0);
                __basicString0.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            public uint ValuesSize
            {
                get
                {
                    var __ret = __Internal.ValuesSize(__Instance);
                    return __ret;
                }
            }

            /// <summary>Returns full section name (subsection name will contain '.', separating subsection part)</summary>
            public string FullName
            {
                get
                {
                    var __ret = __Internal.FullName(__Instance);
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                    return global::Std.BasicStringExtensions.Data(__basicStringRet0);
                }
            }

            /// <summary>Return section name (will be parsed to get individual section name)</summary>
            public string Name
            {
                get
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.Name(__Instance, new IntPtr(&__ret));
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            /// <summary>Get comment, associated with this section (written before the line with the section, or after it)</summary>
            public string Comment
            {
                get
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.Comment(__Instance, new IntPtr(&__ret));
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            public global::UtinniCore.INI.Section FindParent
            {
                get
                {
                    var __ret = __Internal.FindParent(__Instance);
                    global::UtinniCore.INI.Section __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                    return __result0;
                }
            }

            public global::UtinniCore.INI.Section Parent
            {
                get
                {
                    var __ret = __Internal.GetParent(__Instance);
                    global::UtinniCore.INI.Section __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }

        /// <summary>
        /// <para>Main class of the parser</para>
        /// <para>Provides way to load and save ini-files, as well as</para>
        /// <para>setting specific values in them</para>
        /// </summary>
        public unsafe partial class File : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 68)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vfptr_File;

                [FieldOffset(4)]
                internal global::Std.Map.__Internalc__N_std_S_map____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_INI_S_Section___N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S3_ _sections;

                [FieldOffset(12)]
                internal global::UtinniCore.INI.File.PResult.__Internal _result;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0File@INI@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0File@INI@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr fname);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0File@INI@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr __instance, global::System.IntPtr lf);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?CopyFrom@File@INI@@QAEXABV12@@Z")]
                internal static extern void CopyFrom(global::System.IntPtr __instance, global::System.IntPtr lf);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetValue@File@INI@@QAE?AVValue@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV32@@Z")]
                internal static extern void GetValue(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr name, global::System.IntPtr def_val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetValue@File@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@0@Z")]
                internal static extern void SetValue(global::System.IntPtr __instance, global::System.IntPtr name, global::System.IntPtr value, global::System.IntPtr comment);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SetArrayValue@File@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABVValue@2@@Z")]
                internal static extern void SetArrayValue(global::System.IntPtr __instance, global::System.IntPtr key, uint pos, global::System.IntPtr val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetSection@File@INI@@QAEPAVSection@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr GetSection(global::System.IntPtr __instance, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FindSection@File@INI@@QBEPAVSection@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr FindSection(global::System.IntPtr __instance, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?DeleteSection@File@INI@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void DeleteSection(global::System.IntPtr __instance, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FindSubSection@File@INI@@QBEPAVSection@2@PBV32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr FindSubSection(global::System.IntPtr __instance, global::System.IntPtr sect, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetSubSection@File@INI@@QAEPAVSection@2@PAV32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern global::System.IntPtr GetSubSection(global::System.IntPtr __instance, global::System.IntPtr sect, global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?FindParentSection@File@INI@@QBEPAVSection@2@PBV32@@Z")]
                internal static extern global::System.IntPtr FindParentSection(global::System.IntPtr __instance, global::System.IntPtr sect);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?GetParentSection@File@INI@@QAEPAVSection@2@PBV32@@Z")]
                internal static extern global::System.IntPtr GetParentSection(global::System.IntPtr __instance, global::System.IntPtr sect);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Load@File@INI@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z")]
                internal static extern int Load(global::System.IntPtr __instance, global::System.IntPtr fname, bool unload_prev);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Save@File@INI@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern int Save(global::System.IntPtr __instance, global::System.IntPtr fname);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?Unload@File@INI@@QAEXXZ")]
                internal static extern void Unload(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?ParseLine@File@INI@@IBE?AW4LineType@12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV45@111@Z")]
                internal static extern global::UtinniCore.INI.File.LineType ParseLine(global::System.IntPtr __instance, global::System.IntPtr input_line, global::System.IntPtr section, global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr comment);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?SectionsSize@File@INI@@QBEIXZ")]
                internal static extern uint SectionsSize(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?LastResult@File@INI@@QAEABUPResult@12@XZ")]
                internal static extern global::System.IntPtr LastResult(global::System.IntPtr __instance);
            }

            public enum LineType
            {
                LEKSYSINI_EMPTY = 0,
                LEKSYSINI_SECTION = 1,
                LEKSYSINI_ENTRY = 2,
                LEKSYSINI_COMMENT = 3,
                LEKSYSINI_ERROR = 4
            }

            /// <summary>Result of previous parse operation</summary>
            public unsafe partial class PResult : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 56)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int error_code;

                    [FieldOffset(4)]
                    internal int error_line_num;

                    [FieldOffset(8)]
                    internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C error_line;

                    [FieldOffset(32)]
                    internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C file_name;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PResult@File@INI@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PResult@File@INI@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1PResult@File@INI@@QAE@XZ")]
                    internal static extern void dtor(global::System.IntPtr __instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?Set@PResult@File@INI@@QAEXHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                    internal static extern void Set(global::System.IntPtr __instance, int code, int line_num, global::System.IntPtr line);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?Invalidate@PResult@File@INI@@QAEXXZ")]
                    internal static extern void Invalidate(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??BPResult@File@INI@@QBE_NXZ")]
                    [return: MarshalAs(UnmanagedType.I1)]
                    internal static extern bool OperatorConversion(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?GetErrorDesc@PResult@File@INI@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                    internal static extern void GetErrorDesc(global::System.IntPtr __instance, global::System.IntPtr @return);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.File.PResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.File.PResult>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.INI.File.PResult __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.INI.File.PResult(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.INI.File.PResult __CreateInstance(global::UtinniCore.INI.File.PResult.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.INI.File.PResult(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.INI.File.PResult.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.PResult.__Internal));
                    global::UtinniCore.INI.File.PResult.__Internal.cctor(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private PResult(global::UtinniCore.INI.File.PResult.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PResult(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PResult()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.PResult.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public PResult(global::UtinniCore.INI.File.PResult _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.PResult.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor(__Instance, __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.INI.File.PResult __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor(__Instance, 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public void Set(int code, int line_num, string line)
                {
                    var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                    global::Std.BasicStringExtensions.Assign(__basicString2, line);
                    var __arg2 = __basicString2.__Instance;
                    __Internal.Set(__Instance, code, line_num, __arg2);
                    __basicString2.Dispose();
                }

                public void Invalidate()
                {
                    __Internal.Invalidate(__Instance);
                }

                public static implicit operator bool(global::UtinniCore.INI.File.PResult __op)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    var __ret = __Internal.OperatorConversion(__arg0);
                    return __ret;
                }

                public int ErrorCode
                {
                    get
                    {
                        return ((global::UtinniCore.INI.File.PResult.__Internal*) __Instance)->error_code;
                    }

                    set
                    {
                        ((global::UtinniCore.INI.File.PResult.__Internal*)__Instance)->error_code = value;
                    }
                }

                public int ErrorLineNum
                {
                    get
                    {
                        return ((global::UtinniCore.INI.File.PResult.__Internal*) __Instance)->error_line_num;
                    }

                    set
                    {
                        ((global::UtinniCore.INI.File.PResult.__Internal*)__Instance)->error_line_num = value;
                    }
                }

                public string ErrorLine
                {
                    get
                    {
                        var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.INI.File.PResult.__Internal*) __Instance)->error_line));
                        return global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    }

                    set
                    {
                        global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::UtinniCore.INI.File.PResult.__Internal*)__Instance)->error_line), value);
                    }
                }

                public string FileName
                {
                    get
                    {
                        var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.INI.File.PResult.__Internal*) __Instance)->file_name));
                        return global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    }

                    set
                    {
                        global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::UtinniCore.INI.File.PResult.__Internal*)__Instance)->file_name), value);
                    }
                }

                public string ErrorDesc
                {
                    get
                    {
                        var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                        __Internal.GetErrorDesc(__Instance, new IntPtr(&__ret));
                        var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                        var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                        __basicStringRet0.Dispose();
                        return __retString0;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.File> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.INI.File>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.INI.File __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.File(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.INI.File __CreateInstance(global::UtinniCore.INI.File.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.INI.File(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.INI.File.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.__Internal));
                global::UtinniCore.INI.File.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private File(global::UtinniCore.INI.File.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected File(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public File()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
                SetupVTables(GetType().FullName == "UtinniCore.INI.File");
            }

            public File(string fname)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, fname);
                var __arg0 = __basicString0.__Instance;
                __Internal.ctor(__Instance, __arg0);
                __basicString0.Dispose();
                SetupVTables(GetType().FullName == "UtinniCore.INI.File");
            }

            public File(global::UtinniCore.INI.File lf)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.INI.File.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(lf, null))
                    throw new global::System.ArgumentNullException("lf", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = lf.__Instance;
                __Internal.cctor_1(__Instance, __arg0);
                SetupVTables(GetType().FullName == "UtinniCore.INI.File");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.INI.File __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((global::UtinniCore.INI.File.__Internal*) __Instance)->vfptr_File = new global::System.IntPtr(__OriginalVTables[0]);
                if (disposing)
                {
                    var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                    var ___dtorDelegate = (global::UtinniCore.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UtinniCore.Delegates.Action_IntPtr_int));
                    ___dtorDelegate(__Instance, 0);
                }
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void CopyFrom(global::UtinniCore.INI.File lf)
            {
                if (ReferenceEquals(lf, null))
                    throw new global::System.ArgumentNullException("lf", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = lf.__Instance;
                __Internal.CopyFrom(__Instance, __arg0);
            }

            /// <summary>
            /// <para>Get value from the file</para>
            /// <para>Use INI_SECTION_VALUE_DELIMETER to separate section name from value name</para>
            /// </summary>
            public global::UtinniCore.INI.Value GetValue(string name, global::UtinniCore.INI.Value def_val)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(def_val, null))
                    throw new global::System.ArgumentNullException("def_val", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = def_val.__Instance;
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.GetValue(__Instance, new IntPtr(&__ret), __arg0, __arg1);
                __basicString0.Dispose();
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            /// <summary>
            /// <para>Set value to the file</para>
            /// <para>Use INI_SECTION_VALUE_DELIMETER to separate section name from value name</para>
            /// </summary>
            public void SetValue(string name, global::UtinniCore.INI.Value value, string comment)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = value.__Instance;
                var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString2, comment);
                var __arg2 = __basicString2.__Instance;
                __Internal.SetValue(__Instance, __arg0, __arg1, __arg2);
                __basicString0.Dispose();
                __basicString2.Dispose();
            }

            /// <summary>Set array Value to array</summary>
            public void SetArrayValue(string key, uint pos, global::UtinniCore.INI.Value val)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, key);
                var __arg0 = __basicString0.__Instance;
                if (ReferenceEquals(val, null))
                    throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
                var __arg2 = val.__Instance;
                __Internal.SetArrayValue(__Instance, __arg0, pos, __arg2);
                __basicString0.Dispose();
            }

            /// <summary>
            /// <para>Returns pointer to section with specified name</para>
            /// <para>If section does not exists - creates it</para>
            /// </summary>
            public global::UtinniCore.INI.Section GetSection(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.GetSection(__Instance, __arg0);
                __basicString0.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>Find existing section by name</summary>
            /// <returns>pointer to existing section or NULL</returns>
            public global::UtinniCore.INI.Section FindSection(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.FindSection(__Instance, __arg0);
                __basicString0.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>Deletes section with specified name</summary>
            public void DeleteSection(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                __Internal.DeleteSection(__Instance, __arg0);
                __basicString0.Dispose();
            }

            /// <summary>Get subsection of specified section with specified name</summary>
            public global::UtinniCore.INI.Section FindSubSection(global::UtinniCore.INI.Section sect, string name)
            {
                var __arg0 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, name);
                var __arg1 = __basicString1.__Instance;
                var __ret = __Internal.FindSubSection(__Instance, __arg0, __arg1);
                __basicString1.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>If subsection does not exists, creates it</summary>
            public global::UtinniCore.INI.Section GetSubSection(global::UtinniCore.INI.Section sect, string name)
            {
                var __arg0 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, name);
                var __arg1 = __basicString1.__Instance;
                var __ret = __Internal.GetSubSection(__Instance, __arg0, __arg1);
                __basicString1.Dispose();
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>Get parent section of the specified section</summary>
            public global::UtinniCore.INI.Section FindParentSection(global::UtinniCore.INI.Section sect)
            {
                var __arg0 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
                var __ret = __Internal.FindParentSection(__Instance, __arg0);
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>Get parent section (created if needed)</summary>
            public global::UtinniCore.INI.Section GetParentSection(global::UtinniCore.INI.Section sect)
            {
                var __arg0 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
                var __ret = __Internal.GetParentSection(__Instance, __arg0);
                global::UtinniCore.INI.Section __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.INI.Section.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.INI.Section) global::UtinniCore.INI.Section.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.INI.Section.__CreateInstance(__ret);
                return __result0;
            }

            /// <summary>
            /// <para>Load ini from file in system</para>
            /// <para>Set</para>
            /// </summary>
            /// <param name="unload_prev">to false for not unloading any stuff currently in memory before loading</param>
            public int Load(string fname, bool unload_prev)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, fname);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.Load(__Instance, __arg0, unload_prev);
                __basicString0.Dispose();
                return __ret;
            }

            /// <summary>Save ini file to file</summary>
            public int Save(string fname)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, fname);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.Save(__Instance, __arg0);
                __basicString0.Dispose();
                return __ret;
            }

            /// <summary>Unload memory</summary>
            public void Unload()
            {
                __Internal.Unload(__Instance);
            }

            /// <summary>
            /// <para>Parse input line</para>
            /// <para>Line must be concatenated (if needed) and trimmed before passing to this function</para>
            /// </summary>
            /// <param name="input_line">- Line to parse</param>
            /// <param name="section">- will contain section name in case SECTION return</param>
            /// <param name="key">- will contain key in case ENTRY return</param>
            /// <param name="value">- will contain value in case ENTRY return</param>
            /// <param name="comment">- will contain comment in case of return != EMPTY and != ERROR</param>
            /// <returns>type of the parsed line</returns>
            protected global::UtinniCore.INI.File.LineType ParseLine(string input_line, string section, string key, string value, string comment)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, input_line);
                var __arg0 = __basicString0.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, section);
                var __arg1 = __basicString1.__Instance;
                var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString2, key);
                var __arg2 = __basicString2.__Instance;
                var __basicString3 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString3, value);
                var __arg3 = __basicString3.__Instance;
                var __basicString4 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString4, comment);
                var __arg4 = __basicString4.__Instance;
                var __ret = __Internal.ParseLine(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4);
                __basicString0.Dispose();
                __basicString1.Dispose();
                __basicString2.Dispose();
                __basicString3.Dispose();
                __basicString4.Dispose();
                return __ret;
            }

            public static implicit operator global::UtinniCore.INI.File(string fname)
            {
                return new global::UtinniCore.INI.File(fname);
            }

            /// <summary>
            /// <para>A way to iterate through all sections</para>
            /// <para>Section pointer can be accesed as SectionMap::iterator::second, section name - as ::first</para>
            /// </summary>
            public uint SectionsSize
            {
                get
                {
                    var __ret = __Internal.SectionsSize(__Instance);
                    return __ret;
                }
            }

            /// <summary>Return last operation result</summary>
            public global::UtinniCore.INI.File.PResult LastResult
            {
                get
                {
                    var __ret = __Internal.LastResult(__Instance);
                    global::UtinniCore.INI.File.PResult __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.INI.File.PResult.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.INI.File.PResult) global::UtinniCore.INI.File.PResult.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.INI.File.PResult.__CreateInstance(__ret);
                    return __result0;
                }
            }

            #region Virtual table interop

            // virtual ~File() {Unload();}
            private static global::UtinniCore.Delegates.Action_IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(global::System.IntPtr __instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(__instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (global::UtinniCore.INI.File) NativeToManagedMap[__instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(true);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;
            private static void*[] __originalVTables;
            protected internal virtual void*[] __OriginalVTables => __originalVTables ?? new void*[] { *(void**) (__Instance + 0) };
            private void SetupVTables(bool destructorOnly = false)
            {
                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtorDelegateInstance += _dtorDelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();

                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr_dtor0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTablesDtorOnly[0] = vfptr_dtor0.ToPointer();
                    *(void**) (vfptr_dtor0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr_dtor0 + 4) = _Thunks[0];

                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];

                    __originalVTables = new void*[] { *(void**) (__Instance + 0) };}

                if (destructorOnly)
                {
                    *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(void**) (__Instance + 0) = __ManagedVTables[0];
                }
            }

            #endregion
        }

        public unsafe partial class iniparser
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?string_to_lower@INI@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void StringToLower(global::System.IntPtr str);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?string_to_upper@INI@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void StringToUpper(global::System.IntPtr str);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??$t_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@INI@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z")]
                internal static extern void TToString(global::System.IntPtr @return, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??$string_to_t@_N@INI@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool StringToT(global::System.IntPtr v);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?__in_isspace@INI@@YAHH@Z")]
                internal static extern int InIsspace(int ch);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ltrim@INI@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z")]
                internal static extern global::System.IntPtr Ltrim(global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?rtrim@INI@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z")]
                internal static extern global::System.IntPtr Rtrim(global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?trim@INI@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z")]
                internal static extern global::System.IntPtr Trim(global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?char_is_one_of@INI@@YA_NHPBD@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool CharIsOneOf(int ch, [MarshalAs(UnmanagedType.LPUTF8Str)] string charset);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?str_replace@INI@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@ABV23@1@Z")]
                internal static extern global::System.IntPtr StrReplace(global::System.IntPtr str, global::System.IntPtr what, global::System.IntPtr rep);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?normalize_path@INI@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void NormalizePath(global::System.IntPtr path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?file_path@INI@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z")]
                internal static extern void FilePath(global::System.IntPtr @return, global::System.IntPtr file_fullname);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?file_name@INI@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z")]
                internal static extern void FileName(global::System.IntPtr @return, global::System.IntPtr file_fullname);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?path_is_absolute@INI@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool PathIsAbsolute(global::System.IntPtr path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?path_is_relative@INI@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool PathIsRelative(global::System.IntPtr path);
            }

            /// <summary>String to lower case</summary>
            public static void StringToLower(string str)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.StringToLower(__arg0);
                __basicString0.Dispose();
            }

            /// <summary>String to upper case</summary>
            public static void StringToUpper(string str)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                __Internal.StringToUpper(__arg0);
                __basicString0.Dispose();
            }

            /// <summary>Special case for string (to avoid overheat)</summary>
            public static string TToString(string i)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, i);
                var __arg0 = __basicString0.__Instance;
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.TToString(new IntPtr(&__ret), __arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            /// <summary>
            /// <para>Special case for boolean value</para>
            /// <para>std::boolalpha only covers 'true' or 'false', while we have more cases</para>
            /// </summary>
            public static bool StringToT(string v)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, v);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.StringToT(__arg0);
                __basicString0.Dispose();
                return __ret;
            }

            public static int InIsspace(int ch)
            {
                var __ret = __Internal.InIsspace(ch);
                return __ret;
            }

            public static string Ltrim(string s)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, s);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.Ltrim(__arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            public static string Rtrim(string s)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, s);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.Rtrim(__arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            public static string Trim(string s)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, s);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.Trim(__arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            /// <summary>Test whether provided char is in the charset</summary>
            public static bool CharIsOneOf(int ch, string charset)
            {
                var __ret = __Internal.CharIsOneOf(ch, charset);
                return __ret;
            }

            public static string StrReplace(string str, string what, string rep)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, str);
                var __arg0 = __basicString0.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, what);
                var __arg1 = __basicString1.__Instance;
                var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString2, rep);
                var __arg2 = __basicString2.__Instance;
                var __ret = __Internal.StrReplace(__arg0, __arg1, __arg2);
                __basicString0.Dispose();
                __basicString1.Dispose();
                __basicString2.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            public static void NormalizePath(string path)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, path);
                var __arg0 = __basicString0.__Instance;
                __Internal.NormalizePath(__arg0);
                __basicString0.Dispose();
            }

            public static string FilePath(string file_fullname)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, file_fullname);
                var __arg0 = __basicString0.__Instance;
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.FilePath(new IntPtr(&__ret), __arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string FileName(string file_fullname)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, file_fullname);
                var __arg0 = __basicString0.__Instance;
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.FileName(new IntPtr(&__ret), __arg0);
                __basicString0.Dispose();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static bool PathIsAbsolute(string path)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, path);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.PathIsAbsolute(__arg0);
                __basicString0.Dispose();
                return __ret;
            }

            public static bool PathIsRelative(string path)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, path);
                var __arg0 = __basicString0.__Instance;
                var __ret = __Internal.PathIsRelative(__arg0);
                __basicString0.Dispose();
                return __ret;
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class UtINI : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 72)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr filename;

                [FieldOffset(4)]
                internal global::UtinniCore.INI.File.__Internal ini;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0UtINI@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0UtINI@utinni@@QAE@PBD@Z")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string filename);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0UtINI@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1UtINI@utinni@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr __instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?load@UtINI@utinni@@QAEXXZ")]
                internal static extern void Load(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?save@UtINI@utinni@@QAEXXZ")]
                internal static extern void Save(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getValue@UtINI@utinni@@QAE?AVValue@INI@@PBD0@Z")]
                internal static extern void GetValue(global::System.IntPtr __instance, global::System.IntPtr @return, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getString@UtINI@utinni@@QAEPBDPBD0@Z")]
                internal static extern global::System.IntPtr GetString(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getBool@UtINI@utinni@@QAE_NPBD0@Z")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool GetBool(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getInt@UtINI@utinni@@QAEHPBD0@Z")]
                internal static extern int GetInt(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getFloat@UtINI@utinni@@QAEMPBD0@Z")]
                internal static extern float GetFloat(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setValue@UtINI@utinni@@QAEXPBD0ABVValue@INI@@@Z")]
                internal static extern void SetValue(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setString@UtINI@utinni@@QAEXPBD00@Z")]
                internal static extern void SetString(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName, [MarshalAs(UnmanagedType.LPUTF8Str)] string value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setBool@UtINI@utinni@@QAEXPBD0_N@Z")]
                internal static extern void SetBool(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName, bool value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setInt@UtINI@utinni@@QAEXPBD0H@Z")]
                internal static extern void SetInt(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName, int value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setFloat@UtINI@utinni@@QAEXPBD0M@Z")]
                internal static extern void SetFloat(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string sectionName, [MarshalAs(UnmanagedType.LPUTF8Str)] string valueName, float value);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.UtINI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.UtINI>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.UtINI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.UtINI(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.UtINI __CreateInstance(global::UtinniCore.Utinni.UtINI.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.UtINI(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.UtINI.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UtINI.__Internal));
                global::UtinniCore.Utinni.UtINI.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private UtINI(global::UtinniCore.Utinni.UtINI.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected UtINI(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public UtINI()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UtINI.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public UtINI(string filename)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UtINI.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance, filename);
            }

            public UtINI(global::UtinniCore.Utinni.UtINI _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UtINI.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor(__Instance, __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.UtINI __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor(__Instance, 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void Load()
            {
                __Internal.Load(__Instance);
            }

            public void Save()
            {
                __Internal.Save(__Instance);
            }

            public global::UtinniCore.INI.Value GetValue(string sectionName, string valueName)
            {
                var __ret = new global::UtinniCore.INI.Value.__Internal();
                __Internal.GetValue(__Instance, new IntPtr(&__ret), sectionName, valueName);
                return global::UtinniCore.INI.Value.__CreateInstance(__ret);
            }

            public string GetString(string sectionName, string valueName)
            {
                var __ret = __Internal.GetString(__Instance, sectionName, valueName);
                if (__ret == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) __ret;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
            }

            public bool GetBool(string sectionName, string valueName)
            {
                var __ret = __Internal.GetBool(__Instance, sectionName, valueName);
                return __ret;
            }

            public int GetInt(string sectionName, string valueName)
            {
                var __ret = __Internal.GetInt(__Instance, sectionName, valueName);
                return __ret;
            }

            public float GetFloat(string sectionName, string valueName)
            {
                var __ret = __Internal.GetFloat(__Instance, sectionName, valueName);
                return __ret;
            }

            public void SetValue(string sectionName, string valueName, global::UtinniCore.INI.Value value)
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg2 = value.__Instance;
                __Internal.SetValue(__Instance, sectionName, valueName, __arg2);
            }

            public void SetString(string sectionName, string valueName, string value)
            {
                __Internal.SetString(__Instance, sectionName, valueName, value);
            }

            public void SetBool(string sectionName, string valueName, bool value)
            {
                __Internal.SetBool(__Instance, sectionName, valueName, value);
            }

            public void SetInt(string sectionName, string valueName, int value)
            {
                __Internal.SetInt(__Instance, sectionName, valueName, value);
            }

            public void SetFloat(string sectionName, string valueName, float value)
            {
                __Internal.SetFloat(__Instance, sectionName, valueName, value);
            }

            public static implicit operator global::UtinniCore.Utinni.UtINI(string filename)
            {
                return new global::UtinniCore.Utinni.UtINI(filename);
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class utinni
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getPath@utinni@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern global::System.IntPtr GetPath();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getSwgCfgFilename@utinni@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern global::System.IntPtr GetSwgCfgFilename();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getConfig@utinni@@YAABVUtINI@1@XZ")]
                internal static extern global::System.IntPtr GetConfig();
            }

            public static string GetPath()
            {
                var __ret = __Internal.GetPath();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            public static string GetSwgCfgFilename()
            {
                var __ret = __Internal.GetSwgCfgFilename();
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(__ret);
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            public static global::UtinniCore.Utinni.UtINI GetConfig()
            {
                var __ret = __Internal.GetConfig();
                global::UtinniCore.Utinni.UtINI __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.UtINI.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.UtINI) global::UtinniCore.Utinni.UtINI.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.UtINI.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class StartupData : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal byte createOwnWindow;

                [FieldOffset(4)]
                internal global::System.IntPtr windowName;

                [FieldOffset(8)]
                internal global::System.IntPtr normalIcon;

                [FieldOffset(12)]
                internal global::System.IntPtr smallIcon;

                [FieldOffset(16)]
                internal global::System.IntPtr hInstance;

                [FieldOffset(20)]
                internal byte useNewWindowHandle;

                [FieldOffset(21)]
                internal byte processMessagePump;

                [FieldOffset(24)]
                internal global::System.IntPtr windowHandle;

                [FieldOffset(28)]
                internal byte writeMiniDumps;

                [FieldOffset(29)]
                internal byte unk1;

                [FieldOffset(30)]
                internal byte unk2;

                [FieldOffset(32)]
                internal global::System.IntPtr commandLine;

                [FieldOffset(36)]
                internal int argc;

                [FieldOffset(40)]
                internal global::System.IntPtr argv;

                [FieldOffset(44)]
                internal global::System.IntPtr configFile;

                [FieldOffset(48)]
                internal global::System.IntPtr unk3;

                [FieldOffset(52)]
                internal float frameRateLimit;

                [FieldOffset(56)]
                internal byte unk4;

                [FieldOffset(57)]
                internal byte unk5;

                [FieldOffset(60)]
                internal uint lostFocusCallback;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0StartupData@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.StartupData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.StartupData>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.StartupData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.StartupData(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.StartupData __CreateInstance(global::UtinniCore.Utinni.StartupData.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.StartupData(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.StartupData.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StartupData.__Internal));
                *(global::UtinniCore.Utinni.StartupData.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private StartupData(global::UtinniCore.Utinni.StartupData.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected StartupData(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public StartupData()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StartupData.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public StartupData(global::UtinniCore.Utinni.StartupData _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StartupData.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance) = *((global::UtinniCore.Utinni.StartupData.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.StartupData __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public bool CreateOwnWindow
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->createOwnWindow != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->createOwnWindow = (byte) (value ? 1 : 0);
                }
            }

            public string WindowName
            {
                get
                {
                    if (((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->windowName == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->windowName;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->windowName, __length);
                }

                set
                {
                    byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    fixed (byte* __bytePtr0 = __bytes0)
                    {
                        ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->windowName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                    }
                }
            }

            public bool UseNewWindowHandle
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->useNewWindowHandle != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->useNewWindowHandle = (byte) (value ? 1 : 0);
                }
            }

            public bool ProcessMessagePump
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->processMessagePump != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->processMessagePump = (byte) (value ? 1 : 0);
                }
            }

            public bool WriteMiniDumps
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->writeMiniDumps != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->writeMiniDumps = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk1
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk1 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->unk1 = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk2
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk2 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->unk2 = (byte) (value ? 1 : 0);
                }
            }

            public string CommandLine
            {
                get
                {
                    if (((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->commandLine == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->commandLine;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->commandLine, __length);
                }

                set
                {
                    byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    fixed (byte* __bytePtr0 = __bytes0)
                    {
                        ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->commandLine = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                    }
                }
            }

            public int Argc
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->argc;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->argc = value;
                }
            }

            public sbyte** Argv
            {
                get
                {
                    return (sbyte**) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->argv;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->argv = (global::System.IntPtr) value;
                }
            }

            public string ConfigFile
            {
                get
                {
                    if (((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->configFile == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->configFile;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->configFile, __length);
                }

                set
                {
                    byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    fixed (byte* __bytePtr0 = __bytes0)
                    {
                        ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->configFile = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                    }
                }
            }

            public string Unk3
            {
                get
                {
                    if (((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk3 == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk3;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk3, __length);
                }

                set
                {
                    byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    fixed (byte* __bytePtr0 = __bytes0)
                    {
                        ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->unk3 = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                    }
                }
            }

            public float FrameRateLimit
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->frameRateLimit;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->frameRateLimit = value;
                }
            }

            public bool Unk4
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk4 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->unk4 = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk5
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->unk5 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->unk5 = (byte) (value ? 1 : 0);
                }
            }

            public uint LostFocusCallback
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StartupData.__Internal*) __Instance)->lostFocusCallback;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StartupData.__Internal*)__Instance)->lostFocusCallback = value;
                }
            }
        }

        public unsafe partial class Client : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Client@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setHwnd@Client@utinni@@SAXPAX@Z")]
                internal static extern void SetHwnd(global::System.IntPtr newHwnd);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setHInstance@Client@utinni@@SAXPAX@Z")]
                internal static extern void SetHInstance(global::System.IntPtr newHInstance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setSize@Client@utinni@@SAXHH@Z")]
                internal static extern void SetSize(int width, int height);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?suspendInput@Client@utinni@@SAXXZ")]
                internal static extern void SuspendInput();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?resumeInput@Client@utinni@@SAXXZ")]
                internal static extern void ResumeInput();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detour@Client@utinni@@SAXXZ")]
                internal static extern void Detour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getIsEditorChild@Client@utinni@@SA_NXZ")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool GetIsEditorChild();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setIsEditorChild@Client@utinni@@SAX_N@Z")]
                internal static extern void SetIsEditorChild(bool value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getWidth@Client@utinni@@SAHXZ")]
                internal static extern int GetWidth();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getHeight@Client@utinni@@SAHXZ")]
                internal static extern int GetHeight();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Client> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Client>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Client __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Client(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Client __CreateInstance(global::UtinniCore.Utinni.Client.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Client(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Client.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Client.__Internal));
                *(global::UtinniCore.Utinni.Client.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Client(global::UtinniCore.Utinni.Client.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Client(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Client()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Client.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Client(global::UtinniCore.Utinni.Client _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Client.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Client.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Client.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Client __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void SetHwnd(global::System.IntPtr newHwnd)
            {
                __Internal.SetHwnd(newHwnd);
            }

            public static void SetHInstance(global::System.IntPtr newHInstance)
            {
                __Internal.SetHInstance(newHInstance);
            }

            public static void SetSize(int width, int height)
            {
                __Internal.SetSize(width, height);
            }

            public static void SuspendInput()
            {
                __Internal.SuspendInput();
            }

            public static void ResumeInput()
            {
                __Internal.ResumeInput();
            }

            public static void Detour()
            {
                __Internal.Detour();
            }

            public static bool IsEditorChild
            {
                get
                {
                    var __ret = __Internal.GetIsEditorChild();
                    return __ret;
                }

                set
                {
                    __Internal.SetIsEditorChild(value);
                }
            }

            public static int Width
            {
                get
                {
                    var __ret = __Internal.GetWidth();
                    return __ret;
                }
            }

            public static int Height
            {
                get
                {
                    var __ret = __Internal.GetHeight();
                    return __ret;
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class Game : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Game@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?addMainLoopCallback@Game@utinni@@SAXP6AXXZ@Z")]
                internal static extern void AddMainLoopCallback(global::System.IntPtr func);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detour@Game@utinni@@SAXXZ")]
                internal static extern void Detour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?quit@Game@utinni@@SAXXZ")]
                internal static extern void Quit();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?isRunning@Game@utinni@@SA_NXZ")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsRunning();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCamera@Game@utinni@@SAPAVCamera@2@XZ")]
                internal static extern global::System.IntPtr GetCamera();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getConstCamera@Game@utinni@@SAPBVCamera@2@XZ")]
                internal static extern global::System.IntPtr GetConstCamera();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Game> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Game>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Game __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Game(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Game __CreateInstance(global::UtinniCore.Utinni.Game.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Game(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Game.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                *(global::UtinniCore.Utinni.Game.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Game(global::UtinniCore.Utinni.Game.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Game(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Game()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Game(global::UtinniCore.Utinni.Game _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Game.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Game.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Game __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void AddMainLoopCallback(global::UtinniCore.Delegates.Action_ func)
            {
                var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
                __Internal.AddMainLoopCallback(__arg0);
            }

            public static void Detour()
            {
                __Internal.Detour();
            }

            public static void Quit()
            {
                __Internal.Quit();
            }

            public static bool IsRunning
            {
                get
                {
                    var __ret = __Internal.IsRunning();
                    return __ret;
                }
            }

            public static global::UtinniCore.Utinni.Camera Camera
            {
                get
                {
                    var __ret = __Internal.GetCamera();
                    global::UtinniCore.Utinni.Camera __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Camera.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Utinni.Camera) global::UtinniCore.Utinni.Camera.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Utinni.Camera.__CreateInstance(__ret);
                    return __result0;
                }
            }

            public static global::UtinniCore.Utinni.Camera ConstCamera
            {
                get
                {
                    var __ret = __Internal.GetConstCamera();
                    global::UtinniCore.Utinni.Camera __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Camera.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Utinni.Camera) global::UtinniCore.Utinni.Camera.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Utinni.Camera.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class Graphics : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Graphics@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detour@Graphics@utinni@@SAXXZ")]
                internal static extern void Detour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?useHardwareCursor@Graphics@utinni@@SAX_N@Z")]
                internal static extern void UseHardwareCursor(bool value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?showMouseCursor@Graphics@utinni@@SAX_N@Z")]
                internal static extern void ShowMouseCursor(bool isShown);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setSystemMouseCursorPosition@Graphics@utinni@@SAXHH@Z")]
                internal static extern void SetSystemMouseCursorPosition(int X, int Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?flushResources@Graphics@utinni@@SAX_N@Z")]
                internal static extern void FlushResources(bool fullFlush);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?reloadTextures@Graphics@utinni@@SAXXZ")]
                internal static extern void ReloadTextures();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCurrentRenderTargetWidth@Graphics@utinni@@SAHXZ")]
                internal static extern int GetCurrentRenderTargetWidth();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCurrentRenderTargetHeight@Graphics@utinni@@SAHXZ")]
                internal static extern int GetCurrentRenderTargetHeight();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Graphics> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Graphics>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Graphics __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Graphics(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Graphics __CreateInstance(global::UtinniCore.Utinni.Graphics.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Graphics(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Graphics.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Graphics.__Internal));
                *(global::UtinniCore.Utinni.Graphics.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Graphics(global::UtinniCore.Utinni.Graphics.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Graphics(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Graphics()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Graphics.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Graphics(global::UtinniCore.Utinni.Graphics _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Graphics.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Graphics.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Graphics.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Graphics __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void Detour()
            {
                __Internal.Detour();
            }

            public static void UseHardwareCursor(bool value)
            {
                __Internal.UseHardwareCursor(value);
            }

            public static void ShowMouseCursor(bool isShown)
            {
                __Internal.ShowMouseCursor(isShown);
            }

            public static void SetSystemMouseCursorPosition(int X, int Y)
            {
                __Internal.SetSystemMouseCursorPosition(X, Y);
            }

            public static void FlushResources(bool fullFlush)
            {
                __Internal.FlushResources(fullFlush);
            }

            public static void ReloadTextures()
            {
                __Internal.ReloadTextures();
            }

            public static int CurrentRenderTargetWidth
            {
                get
                {
                    var __ret = __Internal.GetCurrentRenderTargetWidth();
                    return __ret;
                }
            }

            public static int CurrentRenderTargetHeight
            {
                get
                {
                    var __ret = __Internal.GetCurrentRenderTargetHeight();
                    return __ret;
                }
            }
        }
    }

    namespace Swg
    {
        namespace Math
        {
            public unsafe partial class Vector2d : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float X;

                    [FieldOffset(4)]
                    internal float Y;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector2d@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector2d@math@swg@@QAE@MM@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, float x, float y);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector2d@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??HVector2d@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorPlus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??GVector2d@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorMinus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??DVector2d@math@swg@@QBE?AU012@M@Z")]
                    internal static extern void OperatorStar(global::System.IntPtr __instance, global::System.IntPtr @return, float scalar);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??KVector2d@math@swg@@QBE?AU012@M@Z")]
                    internal static extern void OperatorSlash(global::System.IntPtr __instance, global::System.IntPtr @return, float scalar);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Vector2d> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Vector2d>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Vector2d __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Vector2d(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Vector2d __CreateInstance(global::UtinniCore.Swg.Math.Vector2d.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Vector2d(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Vector2d.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector2d.__Internal));
                    *(global::UtinniCore.Swg.Math.Vector2d.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Vector2d(global::UtinniCore.Swg.Math.Vector2d.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Vector2d(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Vector2d()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Vector2d(float x, float y)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x, y);
                }

                public Vector2d(global::UtinniCore.Swg.Math.Vector2d _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Vector2d.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Vector2d.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Vector2d __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public static global::UtinniCore.Swg.Math.Vector2d operator +(global::UtinniCore.Swg.Math.Vector2d __op, global::UtinniCore.Swg.Math.Vector2d vector)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector2d.__Internal();
                    __Internal.OperatorPlus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Vector2d.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector2d operator -(global::UtinniCore.Swg.Math.Vector2d __op, global::UtinniCore.Swg.Math.Vector2d vector)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector2d.__Internal();
                    __Internal.OperatorMinus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Vector2d.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector2d operator *(global::UtinniCore.Swg.Math.Vector2d __op, float scalar)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector2d.__Internal();
                    __Internal.OperatorStar(__arg0, new IntPtr(&__ret), scalar);
                    return global::UtinniCore.Swg.Math.Vector2d.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector2d operator /(global::UtinniCore.Swg.Math.Vector2d __op, float scalar)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector2d.__Internal();
                    __Internal.OperatorSlash(__arg0, new IntPtr(&__ret), scalar);
                    return global::UtinniCore.Swg.Math.Vector2d.__CreateInstance(__ret);
                }

                public float X
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Vector2d.__Internal*) __Instance)->X;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Vector2d.__Internal*)__Instance)->X = value;
                    }
                }

                public float Y
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Vector2d.__Internal*) __Instance)->Y;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Vector2d.__Internal*)__Instance)->Y = value;
                    }
                }
            }

            public unsafe partial class Vector : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float X;

                    [FieldOffset(4)]
                    internal float Y;

                    [FieldOffset(8)]
                    internal float Z;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector@math@swg@@QAE@MMM@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, float x, float y, float z);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Vector@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??HVector@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorPlus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??GVector@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorMinus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??DVector@math@swg@@QBE?AU012@M@Z")]
                    internal static extern void OperatorStar(global::System.IntPtr __instance, global::System.IntPtr @return, float scalar);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??KVector@math@swg@@QBE?AU012@M@Z")]
                    internal static extern void OperatorSlash(global::System.IntPtr __instance, global::System.IntPtr @return, float scalar);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?normalize@Vector@math@swg@@QAE_NXZ")]
                    [return: MarshalAs(UnmanagedType.I1)]
                    internal static extern bool Normalize(global::System.IntPtr __instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Vector> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Vector>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Vector __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Vector(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Vector __CreateInstance(global::UtinniCore.Swg.Math.Vector.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Vector(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Vector.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector.__Internal));
                    *(global::UtinniCore.Swg.Math.Vector.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Vector(global::UtinniCore.Swg.Math.Vector.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Vector(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Vector()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Vector(float x, float y, float z)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x, y, z);
                }

                public Vector(global::UtinniCore.Swg.Math.Vector _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Vector.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Vector.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Vector.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Vector __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public static global::UtinniCore.Swg.Math.Vector operator +(global::UtinniCore.Swg.Math.Vector __op, global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.OperatorPlus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector operator -(global::UtinniCore.Swg.Math.Vector __op, global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.OperatorMinus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector operator *(global::UtinniCore.Swg.Math.Vector __op, float scalar)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.OperatorStar(__arg0, new IntPtr(&__ret), scalar);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Vector operator /(global::UtinniCore.Swg.Math.Vector __op, float scalar)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.OperatorSlash(__arg0, new IntPtr(&__ret), scalar);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public bool Normalize()
                {
                    var __ret = __Internal.Normalize(__Instance);
                    return __ret;
                }

                public float X
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Vector.__Internal*) __Instance)->X;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Vector.__Internal*)__Instance)->X = value;
                    }
                }

                public float Y
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Vector.__Internal*) __Instance)->Y;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Vector.__Internal*)__Instance)->Y = value;
                    }
                }

                public float Z
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Vector.__Internal*) __Instance)->Z;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Vector.__Internal*)__Instance)->Z = value;
                    }
                }
            }

            public unsafe partial class Transform : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal fixed float matrix[12];

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Transform@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Transform@math@swg@@QAE@MMM@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, float x, float y, float z);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Transform@math@swg@@QAE@AAUVector@12@@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr position);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Transform@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setPosition@Transform@math@swg@@QAEXMMM@Z")]
                    internal static extern void SetPosition(global::System.IntPtr __instance, float x, float y, float z);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?rotate_l2p@Transform@math@swg@@QAE?AUVector@23@ABU423@@Z")]
                    internal static extern void RotateL2p(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPosition@Transform@math@swg@@QAE?AU123@ABU123@@Z")]
                    internal static extern void AddPosition(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPosition@Transform@math@swg@@QAE?AU123@ABUVector@23@@Z")]
                    internal static extern void AddPosition_1(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?subtractPosition@Transform@math@swg@@QAE?AU123@ABU123@@Z")]
                    internal static extern void SubtractPosition(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?subtractPosition@Transform@math@swg@@QAE?AU123@ABUVector@23@@Z")]
                    internal static extern void SubtractPosition_1(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?multiply@Transform@math@swg@@QAEXABU123@@Z")]
                    internal static extern void Multiply(global::System.IntPtr __instance, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?multiply@Transform@math@swg@@QAEXABU123@0@Z")]
                    internal static extern void Multiply(global::System.IntPtr __instance, global::System.IntPtr left, global::System.IntPtr right);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?invert@Transform@math@swg@@QAEXABU123@@Z")]
                    internal static extern void Invert(global::System.IntPtr __instance, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?rotate_o2w@Transform@math@swg@@QAE?AUVector@23@ABU423@@Z")]
                    internal static extern void RotateO2w(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?rotate_p2w@Transform@math@swg@@QAE?AUVector@23@ABU423@@Z")]
                    internal static extern void RotateP2w(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr vector);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPosition@Transform@math@swg@@QAE?AUVector@23@XZ")]
                    internal static extern void GetPosition(global::System.IntPtr __instance, global::System.IntPtr @return);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setPosition@Transform@math@swg@@QAEXABUVector@23@@Z")]
                    internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr position);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?getIdentity@Transform@math@swg@@SA?AU123@XZ")]
                    internal static extern void GetIdentity(global::System.IntPtr @return);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Transform> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Transform>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Transform __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Transform(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Transform __CreateInstance(global::UtinniCore.Swg.Math.Transform.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Transform(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Transform.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Transform.__Internal));
                    *(global::UtinniCore.Swg.Math.Transform.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Transform(global::UtinniCore.Swg.Math.Transform.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Transform(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Transform()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Transform.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Transform(float x, float y, float z)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Transform.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x, y, z);
                }

                public Transform(global::UtinniCore.Swg.Math.Vector position)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Transform.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(position, null))
                        throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = position.__Instance;
                    __Internal.ctor(__Instance, __arg0);
                }

                public Transform(global::UtinniCore.Swg.Math.Transform _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Transform.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Transform.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Transform.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Transform __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public void SetPosition(float x, float y, float z)
                {
                    __Internal.SetPosition(__Instance, x, y, z);
                }

                public global::UtinniCore.Swg.Math.Vector RotateL2p(global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.RotateL2p(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Transform AddPosition(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Transform.__Internal();
                    __Internal.AddPosition(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Transform AddPosition(global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Transform.__Internal();
                    __Internal.AddPosition_1(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Transform SubtractPosition(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Transform.__Internal();
                    __Internal.SubtractPosition(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Transform SubtractPosition(global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Transform.__Internal();
                    __Internal.SubtractPosition_1(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                }

                public void Multiply(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    __Internal.Multiply(__Instance, __arg0);
                }

                public void Multiply(global::UtinniCore.Swg.Math.Transform left, global::UtinniCore.Swg.Math.Transform right)
                {
                    if (ReferenceEquals(left, null))
                        throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = left.__Instance;
                    if (ReferenceEquals(right, null))
                        throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = right.__Instance;
                    __Internal.Multiply(__Instance, __arg0, __arg1);
                }

                public void Invert(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    __Internal.Invert(__Instance, __arg0);
                }

                public global::UtinniCore.Swg.Math.Vector RotateO2w(global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.RotateO2w(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Vector RotateP2w(global::UtinniCore.Swg.Math.Vector vector)
                {
                    if (ReferenceEquals(vector, null))
                        throw new global::System.ArgumentNullException("vector", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = vector.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                    __Internal.RotateP2w(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                }

                public static implicit operator global::UtinniCore.Swg.Math.Transform(global::UtinniCore.Swg.Math.Vector position)
                {
                    return new global::UtinniCore.Swg.Math.Transform(position);
                }

                public global::UtinniCore.Swg.Math.Vector Position
                {
                    get
                    {
                        var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                        __Internal.GetPosition(__Instance, new IntPtr(&__ret));
                        return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
                    }

                    set
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                        var __arg0 = value.__Instance;
                        __Internal.SetPosition(__Instance, __arg0);
                    }
                }

                public static global::UtinniCore.Swg.Math.Transform Identity
                {
                    get
                    {
                        var __ret = new global::UtinniCore.Swg.Math.Transform.__Internal();
                        __Internal.GetIdentity(new IntPtr(&__ret));
                        return global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                    }
                }
            }

            public unsafe partial class Matrix4x4 : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 64)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal fixed float matrix[16];

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Matrix4x4@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Matrix4x4@math@swg@@QAE@ABUTransform@12@@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Matrix4x4@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr __instance, global::System.IntPtr matrix4x4);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPosition@Matrix4x4@math@swg@@QAE?AU123@ABU123@@Z")]
                    internal static extern void AddPosition(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr matrix4x4);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?subtractPosition@Matrix4x4@math@swg@@QAE?AU123@ABU123@@Z")]
                    internal static extern void SubtractPosition(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr matrix4x4);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?transpose@Matrix4x4@math@swg@@SAXPBMPAM@Z")]
                    internal static extern void Transpose(float* source, float* destination);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??HMatrix4x4@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorPlus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr matrix);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??GMatrix4x4@math@swg@@QBE?AU012@ABU012@@Z")]
                    internal static extern void OperatorMinus(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr matrix);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Matrix4x4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Matrix4x4>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Matrix4x4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Matrix4x4(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Matrix4x4 __CreateInstance(global::UtinniCore.Swg.Math.Matrix4x4.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Matrix4x4(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Matrix4x4.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Matrix4x4.__Internal));
                    global::UtinniCore.Swg.Math.Matrix4x4.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Matrix4x4(global::UtinniCore.Swg.Math.Matrix4x4.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Matrix4x4(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Matrix4x4()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Matrix4x4.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Matrix4x4(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Matrix4x4.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    __Internal.ctor(__Instance, __arg0);
                }

                public Matrix4x4(global::UtinniCore.Swg.Math.Matrix4x4 matrix4x4)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Matrix4x4.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(matrix4x4, null))
                        throw new global::System.ArgumentNullException("matrix4x4", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = matrix4x4.__Instance;
                    __Internal.cctor_1(__Instance, __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Matrix4x4 __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public global::UtinniCore.Swg.Math.Matrix4x4 AddPosition(global::UtinniCore.Swg.Math.Matrix4x4 matrix4x4)
                {
                    if (ReferenceEquals(matrix4x4, null))
                        throw new global::System.ArgumentNullException("matrix4x4", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = matrix4x4.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Matrix4x4.__Internal();
                    __Internal.AddPosition(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Matrix4x4.__CreateInstance(__ret);
                }

                public global::UtinniCore.Swg.Math.Matrix4x4 SubtractPosition(global::UtinniCore.Swg.Math.Matrix4x4 matrix4x4)
                {
                    if (ReferenceEquals(matrix4x4, null))
                        throw new global::System.ArgumentNullException("matrix4x4", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = matrix4x4.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Matrix4x4.__Internal();
                    __Internal.SubtractPosition(__Instance, new IntPtr(&__ret), __arg0);
                    return global::UtinniCore.Swg.Math.Matrix4x4.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Matrix4x4 operator +(global::UtinniCore.Swg.Math.Matrix4x4 __op, global::UtinniCore.Swg.Math.Matrix4x4 matrix)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(matrix, null))
                        throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = matrix.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Matrix4x4.__Internal();
                    __Internal.OperatorPlus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Matrix4x4.__CreateInstance(__ret);
                }

                public static global::UtinniCore.Swg.Math.Matrix4x4 operator -(global::UtinniCore.Swg.Math.Matrix4x4 __op, global::UtinniCore.Swg.Math.Matrix4x4 matrix)
                {
                    if (ReferenceEquals(__op, null))
                        throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = __op.__Instance;
                    if (ReferenceEquals(matrix, null))
                        throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
                    var __arg1 = matrix.__Instance;
                    var __ret = new global::UtinniCore.Swg.Math.Matrix4x4.__Internal();
                    __Internal.OperatorMinus(__arg0, new IntPtr(&__ret), __arg1);
                    return global::UtinniCore.Swg.Math.Matrix4x4.__CreateInstance(__ret);
                }

                public static implicit operator global::UtinniCore.Swg.Math.Matrix4x4(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    return new global::UtinniCore.Swg.Math.Matrix4x4(Transform);
                }

                public static void Transpose(ref float source, ref float destination)
                {
                    fixed (float* __source0 = &source)
                    {
                        var __arg0 = __source0;
                        fixed (float* __destination1 = &destination)
                        {
                            var __arg1 = __destination1;
                            __Internal.Transpose(__arg0, __arg1);
                        }
                    }
                }
            }

            public unsafe partial class Plane : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::UtinniCore.Swg.Math.Vector.__Internal normal;

                    [FieldOffset(12)]
                    internal float d;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Plane@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Plane@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Plane> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Plane>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Plane __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Plane(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Plane __CreateInstance(global::UtinniCore.Swg.Math.Plane.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Plane(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Plane.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Plane.__Internal));
                    *(global::UtinniCore.Swg.Math.Plane.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Plane(global::UtinniCore.Swg.Math.Plane.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Plane(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Plane()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Plane.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Plane(global::UtinniCore.Swg.Math.Plane _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Plane.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Plane.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Plane.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Plane __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public global::UtinniCore.Swg.Math.Vector Normal
                {
                    get
                    {
                        return global::UtinniCore.Swg.Math.Vector.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Swg.Math.Plane.__Internal*) __Instance)->normal));
                    }

                    set
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::UtinniCore.Swg.Math.Plane.__Internal*)__Instance)->normal = *(global::UtinniCore.Swg.Math.Vector.__Internal*) value.__Instance;
                    }
                }

                public float D
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Plane.__Internal*) __Instance)->d;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Plane.__Internal*)__Instance)->d = value;
                    }
                }
            }

            public unsafe partial class Volume : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int numberOfPlanes;

                    [FieldOffset(4)]
                    internal global::System.IntPtr plane;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Volume@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Volume> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Volume>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Volume __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Volume(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Volume __CreateInstance(global::UtinniCore.Swg.Math.Volume.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Volume(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Volume.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Volume.__Internal));
                    *(global::UtinniCore.Swg.Math.Volume.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Volume(global::UtinniCore.Swg.Math.Volume.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Volume(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Volume()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Volume.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public Volume(global::UtinniCore.Swg.Math.Volume _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Volume.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Volume.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Volume __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public int NumberOfPlanes
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance)->numberOfPlanes;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Volume.__Internal*)__Instance)->numberOfPlanes = value;
                    }
                }

                public global::UtinniCore.Swg.Math.Plane Plane
                {
                    get
                    {
                        global::UtinniCore.Swg.Math.Plane __result0;
                        if (((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance)->plane == IntPtr.Zero) __result0 = null;
                        else if (global::UtinniCore.Swg.Math.Plane.NativeToManagedMap.ContainsKey(((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance)->plane))
                            __result0 = (global::UtinniCore.Swg.Math.Plane) global::UtinniCore.Swg.Math.Plane.NativeToManagedMap[((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance)->plane];
                        else __result0 = global::UtinniCore.Swg.Math.Plane.__CreateInstance(((global::UtinniCore.Swg.Math.Volume.__Internal*) __Instance)->plane);
                        return __result0;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Volume.__Internal*)__Instance)->plane = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Quaternion : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float W;

                    [FieldOffset(4)]
                    internal float X;

                    [FieldOffset(8)]
                    internal float Y;

                    [FieldOffset(12)]
                    internal float Z;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Quaternion@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Quaternion@math@swg@@QAE@ABUTransform@12@@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr Transform);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Quaternion@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Quaternion>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Quaternion(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Quaternion __CreateInstance(global::UtinniCore.Swg.Math.Quaternion.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Quaternion(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Quaternion.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Quaternion.__Internal));
                    *(global::UtinniCore.Swg.Math.Quaternion.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Quaternion(global::UtinniCore.Swg.Math.Quaternion.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Quaternion(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Quaternion()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Quaternion.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Quaternion(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Quaternion.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(Transform, null))
                        throw new global::System.ArgumentNullException("Transform", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = Transform.__Instance;
                    __Internal.ctor(__Instance, __arg0);
                }

                public Quaternion(global::UtinniCore.Swg.Math.Quaternion _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Quaternion.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Quaternion.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Quaternion.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Quaternion __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public static implicit operator global::UtinniCore.Swg.Math.Quaternion(global::UtinniCore.Swg.Math.Transform Transform)
                {
                    return new global::UtinniCore.Swg.Math.Quaternion(Transform);
                }

                public float W
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Quaternion.__Internal*) __Instance)->W;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Quaternion.__Internal*)__Instance)->W = value;
                    }
                }

                public float X
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Quaternion.__Internal*) __Instance)->X;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Quaternion.__Internal*)__Instance)->X = value;
                    }
                }

                public float Y
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Quaternion.__Internal*) __Instance)->Y;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Quaternion.__Internal*)__Instance)->Y = value;
                    }
                }

                public float Z
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Quaternion.__Internal*) __Instance)->Z;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Quaternion.__Internal*)__Instance)->Z = value;
                    }
                }
            }

            public unsafe partial class Point : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float X;

                    [FieldOffset(4)]
                    internal float Y;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Point@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Point@math@swg@@QAE@MM@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, float x, float y);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Point@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Point> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Point>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Point __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Point(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Point __CreateInstance(global::UtinniCore.Swg.Math.Point.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Point(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Point.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Point.__Internal));
                    *(global::UtinniCore.Swg.Math.Point.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Point(global::UtinniCore.Swg.Math.Point.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Point(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Point()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Point.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Point(float x, float y)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Point.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x, y);
                }

                public Point(global::UtinniCore.Swg.Math.Point _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Point.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Point.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Point.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Point __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public float X
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Point.__Internal*) __Instance)->X;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Point.__Internal*)__Instance)->X = value;
                    }
                }

                public float Y
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Point.__Internal*) __Instance)->Y;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Point.__Internal*)__Instance)->Y = value;
                    }
                }
            }

            public unsafe partial class UiPoint : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int X;

                    [FieldOffset(4)]
                    internal int Y;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiPoint@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiPoint@math@swg@@QAE@HH@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, int x, int y);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiPoint@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.UiPoint> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.UiPoint>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.UiPoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.UiPoint(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.UiPoint __CreateInstance(global::UtinniCore.Swg.Math.UiPoint.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.UiPoint(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.UiPoint.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiPoint.__Internal));
                    *(global::UtinniCore.Swg.Math.UiPoint.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private UiPoint(global::UtinniCore.Swg.Math.UiPoint.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected UiPoint(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public UiPoint()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiPoint.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public UiPoint(int x, int y)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiPoint.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x, y);
                }

                public UiPoint(global::UtinniCore.Swg.Math.UiPoint _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiPoint.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.UiPoint.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.UiPoint.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.UiPoint __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public int X
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiPoint.__Internal*) __Instance)->X;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiPoint.__Internal*)__Instance)->X = value;
                    }
                }

                public int Y
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiPoint.__Internal*) __Instance)->Y;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiPoint.__Internal*)__Instance)->Y = value;
                    }
                }
            }

            public unsafe partial class Rect2d : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float X0;

                    [FieldOffset(4)]
                    internal float Y0;

                    [FieldOffset(8)]
                    internal float X1;

                    [FieldOffset(12)]
                    internal float Y1;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Rect2d@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Rect2d@math@swg@@QAE@MMMM@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, float x0, float y0, float x1, float y1);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Rect2d@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getWidth@Rect2d@math@swg@@QBEMXZ")]
                    internal static extern float GetWidth(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getHeight@Rect2d@math@swg@@QBEMXZ")]
                    internal static extern float GetHeight(global::System.IntPtr __instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Rect2d> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.Rect2d>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.Rect2d __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Rect2d(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.Rect2d __CreateInstance(global::UtinniCore.Swg.Math.Rect2d.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.Rect2d(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.Rect2d.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Rect2d.__Internal));
                    *(global::UtinniCore.Swg.Math.Rect2d.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Rect2d(global::UtinniCore.Swg.Math.Rect2d.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Rect2d(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Rect2d()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Rect2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Rect2d(float x0, float y0, float x1, float y1)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Rect2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, x0, y0, x1, y1);
                }

                public Rect2d(global::UtinniCore.Swg.Math.Rect2d _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.Rect2d.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.Rect2d.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.Rect2d.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.Rect2d __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public float X0
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Rect2d.__Internal*) __Instance)->X0;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Rect2d.__Internal*)__Instance)->X0 = value;
                    }
                }

                public float Y0
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Rect2d.__Internal*) __Instance)->Y0;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Rect2d.__Internal*)__Instance)->Y0 = value;
                    }
                }

                public float X1
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Rect2d.__Internal*) __Instance)->X1;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Rect2d.__Internal*)__Instance)->X1 = value;
                    }
                }

                public float Y1
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.Rect2d.__Internal*) __Instance)->Y1;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.Rect2d.__Internal*)__Instance)->Y1 = value;
                    }
                }

                public float Width
                {
                    get
                    {
                        var __ret = __Internal.GetWidth(__Instance);
                        return __ret;
                    }
                }

                public float Height
                {
                    get
                    {
                        var __ret = __Internal.GetHeight(__Instance);
                        return __ret;
                    }
                }
            }

            public unsafe partial class UiRect : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int Left;

                    [FieldOffset(4)]
                    internal int Top;

                    [FieldOffset(8)]
                    internal int Right;

                    [FieldOffset(12)]
                    internal int Bottom;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiRect@math@swg@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiRect@math@swg@@QAE@HHHH@Z")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, int left, int top, int right, int bottom);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UiRect@math@swg@@QAE@ABU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getWidth@UiRect@math@swg@@QBEHXZ")]
                    internal static extern int GetWidth(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getHeight@UiRect@math@swg@@QBEHXZ")]
                    internal static extern int GetHeight(global::System.IntPtr __instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.UiRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Swg.Math.UiRect>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Swg.Math.UiRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.UiRect(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Swg.Math.UiRect __CreateInstance(global::UtinniCore.Swg.Math.UiRect.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Swg.Math.UiRect(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Swg.Math.UiRect.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiRect.__Internal));
                    *(global::UtinniCore.Swg.Math.UiRect.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private UiRect(global::UtinniCore.Swg.Math.UiRect.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected UiRect(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public UiRect()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiRect.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public UiRect(int left, int top, int right, int bottom)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiRect.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance, left, top, right, bottom);
                }

                public UiRect(global::UtinniCore.Swg.Math.UiRect _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Swg.Math.UiRect.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Swg.Math.UiRect.__Internal*) __Instance) = *((global::UtinniCore.Swg.Math.UiRect.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Swg.Math.UiRect __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public int Left
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiRect.__Internal*) __Instance)->Left;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiRect.__Internal*)__Instance)->Left = value;
                    }
                }

                public int Top
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiRect.__Internal*) __Instance)->Top;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiRect.__Internal*)__Instance)->Top = value;
                    }
                }

                public int Right
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiRect.__Internal*) __Instance)->Right;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiRect.__Internal*)__Instance)->Right = value;
                    }
                }

                public int Bottom
                {
                    get
                    {
                        return ((global::UtinniCore.Swg.Math.UiRect.__Internal*) __Instance)->Bottom;
                    }

                    set
                    {
                        ((global::UtinniCore.Swg.Math.UiRect.__Internal*)__Instance)->Bottom = value;
                    }
                }

                public int Width
                {
                    get
                    {
                        var __ret = __Internal.GetWidth(__Instance);
                        return __ret;
                    }
                }

                public int Height
                {
                    get
                    {
                        var __ret = __Internal.GetHeight(__Instance);
                        return __ret;
                    }
                }
            }
        }
    }

    namespace Utinni
    {
        public enum Commands
        {
            CmdUp = 3332,
            CmdUpfast = 3333,
            CmdDown = 3334,
            CmdDownfast = 3335
        }

        public unsafe partial class IoWin : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::System.IntPtr name;

                [FieldOffset(8)]
                internal global::System.IntPtr ioWin;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0IoWin@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.IoWin> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.IoWin>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.IoWin __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.IoWin(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.IoWin __CreateInstance(global::UtinniCore.Utinni.IoWin.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.IoWin(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.IoWin.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.IoWin.__Internal));
                *(global::UtinniCore.Utinni.IoWin.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private IoWin(global::UtinniCore.Utinni.IoWin.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected IoWin(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public IoWin()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.IoWin.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public IoWin(global::UtinniCore.Utinni.IoWin _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.IoWin.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance) = *((global::UtinniCore.Utinni.IoWin.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.IoWin __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.IoWin.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public sbyte* Name
            {
                get
                {
                    return (sbyte*) ((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->name;
                }

                set
                {
                    ((global::UtinniCore.Utinni.IoWin.__Internal*)__Instance)->name = (global::System.IntPtr) value;
                }
            }

            public global::UtinniCore.Utinni.IoWin ioWin
            {
                get
                {
                    global::UtinniCore.Utinni.IoWin __result0;
                    if (((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->ioWin == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.IoWin.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->ioWin))
                        __result0 = (global::UtinniCore.Utinni.IoWin) global::UtinniCore.Utinni.IoWin.NativeToManagedMap[((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->ioWin];
                    else __result0 = global::UtinniCore.Utinni.IoWin.__CreateInstance(((global::UtinniCore.Utinni.IoWin.__Internal*) __Instance)->ioWin);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.IoWin.__Internal*)__Instance)->ioWin = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class MouseCursor : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint style;

                [FieldOffset(4)]
                internal byte unk01;

                [FieldOffset(8)]
                internal int unk02;

                [FieldOffset(12)]
                internal int localX;

                [FieldOffset(16)]
                internal int localY;

                [FieldOffset(20)]
                internal global::System.IntPtr x;

                [FieldOffset(24)]
                internal global::System.IntPtr y;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0MouseCursor@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.MouseCursor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.MouseCursor>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.MouseCursor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.MouseCursor(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.MouseCursor __CreateInstance(global::UtinniCore.Utinni.MouseCursor.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.MouseCursor(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.MouseCursor.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.MouseCursor.__Internal));
                *(global::UtinniCore.Utinni.MouseCursor.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private MouseCursor(global::UtinniCore.Utinni.MouseCursor.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected MouseCursor(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public MouseCursor()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.MouseCursor.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public MouseCursor(global::UtinniCore.Utinni.MouseCursor _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.MouseCursor.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance) = *((global::UtinniCore.Utinni.MouseCursor.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.MouseCursor __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint Style
            {
                get
                {
                    return ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->style;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->style = value;
                }
            }

            public bool Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->unk01 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->unk01 = (byte) (value ? 1 : 0);
                }
            }

            public int Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->unk02 = value;
                }
            }

            public int LocalX
            {
                get
                {
                    return ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->localX;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->localX = value;
                }
            }

            public int LocalY
            {
                get
                {
                    return ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->localY;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->localY = value;
                }
            }

            public int* X
            {
                get
                {
                    return (int*) ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->x;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->x = (global::System.IntPtr) value;
                }
            }

            public int* Y
            {
                get
                {
                    return (int*) ((global::UtinniCore.Utinni.MouseCursor.__Internal*) __Instance)->y;
                }

                set
                {
                    ((global::UtinniCore.Utinni.MouseCursor.__Internal*)__Instance)->y = (global::System.IntPtr) value;
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class CrcString : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint crc;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CrcString@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CrcString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CrcString>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.CrcString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CrcString(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.CrcString __CreateInstance(global::UtinniCore.Utinni.CrcString.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CrcString(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.CrcString.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CrcString.__Internal));
                *(global::UtinniCore.Utinni.CrcString.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private CrcString(global::UtinniCore.Utinni.CrcString.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected CrcString(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public CrcString()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public CrcString(global::UtinniCore.Utinni.CrcString _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.CrcString.__Internal*) __Instance) = *((global::UtinniCore.Utinni.CrcString.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.CrcString __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.CrcString.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.CrcString.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public uint Crc
            {
                get
                {
                    return ((global::UtinniCore.Utinni.CrcString.__Internal*) __Instance)->crc;
                }

                set
                {
                    ((global::UtinniCore.Utinni.CrcString.__Internal*)__Instance)->crc = value;
                }
            }
        }

        public unsafe partial class PersistentCrcString : global::UtinniCore.Utinni.CrcString, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint crc;

                [FieldOffset(8)]
                internal global::System.IntPtr unk01;

                [FieldOffset(12)]
                internal global::System.IntPtr buffer;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0PersistentCrcString@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ctor@PersistentCrcString@utinni@@SAPAU12@PBD@Z")]
                internal static extern global::System.IntPtr Ctor([MarshalAs(UnmanagedType.LPUTF8Str)] string str);
            }

            internal static new global::UtinniCore.Utinni.PersistentCrcString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PersistentCrcString(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.PersistentCrcString __CreateInstance(global::UtinniCore.Utinni.PersistentCrcString.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PersistentCrcString(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.PersistentCrcString.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PersistentCrcString.__Internal));
                *(global::UtinniCore.Utinni.PersistentCrcString.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private PersistentCrcString(global::UtinniCore.Utinni.PersistentCrcString.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected PersistentCrcString(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public PersistentCrcString()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PersistentCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public PersistentCrcString(global::UtinniCore.Utinni.PersistentCrcString _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PersistentCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.PersistentCrcString.__Internal*) __Instance) = *((global::UtinniCore.Utinni.PersistentCrcString.__Internal*) _0.__Instance);
            }

            public static global::UtinniCore.Utinni.PersistentCrcString Ctor(string str)
            {
                var __ret = __Internal.Ctor(str);
                global::UtinniCore.Utinni.PersistentCrcString __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.PersistentCrcString.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.PersistentCrcString) global::UtinniCore.Utinni.PersistentCrcString.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.PersistentCrcString.__CreateInstance(__ret);
                return __result0;
            }

            public uint* Unk01
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.PersistentCrcString.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.PersistentCrcString.__Internal*)__Instance)->unk01 = (global::System.IntPtr) value;
                }
            }

            public sbyte* Buffer
            {
                get
                {
                    return (sbyte*) ((global::UtinniCore.Utinni.PersistentCrcString.__Internal*) __Instance)->buffer;
                }

                set
                {
                    ((global::UtinniCore.Utinni.PersistentCrcString.__Internal*)__Instance)->buffer = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class TemporaryCrcString : global::UtinniCore.Utinni.CrcString, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint crc;

                [FieldOffset(8)]
                internal global::System.IntPtr buffer;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0TemporaryCrcString@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::UtinniCore.Utinni.TemporaryCrcString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.TemporaryCrcString(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.TemporaryCrcString __CreateInstance(global::UtinniCore.Utinni.TemporaryCrcString.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.TemporaryCrcString(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.TemporaryCrcString.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.TemporaryCrcString.__Internal));
                *(global::UtinniCore.Utinni.TemporaryCrcString.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private TemporaryCrcString(global::UtinniCore.Utinni.TemporaryCrcString.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected TemporaryCrcString(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public TemporaryCrcString()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.TemporaryCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public TemporaryCrcString(global::UtinniCore.Utinni.TemporaryCrcString _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.TemporaryCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.TemporaryCrcString.__Internal*) __Instance) = *((global::UtinniCore.Utinni.TemporaryCrcString.__Internal*) _0.__Instance);
            }

            public sbyte* Buffer
            {
                get
                {
                    return (sbyte*) ((global::UtinniCore.Utinni.TemporaryCrcString.__Internal*) __Instance)->buffer;
                }

                set
                {
                    ((global::UtinniCore.Utinni.TemporaryCrcString.__Internal*)__Instance)->buffer = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class ConstCharCrcString : global::UtinniCore.Utinni.CrcString, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint crc;

                [FieldOffset(8)]
                internal global::System.IntPtr buffer;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ConstCharCrcString@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ctor@ConstCharCrcString@utinni@@SAPAU12@PBD@Z")]
                internal static extern global::System.IntPtr Ctor([MarshalAs(UnmanagedType.LPUTF8Str)] string str);
            }

            internal static new global::UtinniCore.Utinni.ConstCharCrcString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ConstCharCrcString(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.ConstCharCrcString __CreateInstance(global::UtinniCore.Utinni.ConstCharCrcString.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ConstCharCrcString(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.ConstCharCrcString.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ConstCharCrcString.__Internal));
                *(global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ConstCharCrcString(global::UtinniCore.Utinni.ConstCharCrcString.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ConstCharCrcString(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public ConstCharCrcString()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ConstCharCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public ConstCharCrcString(global::UtinniCore.Utinni.ConstCharCrcString _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ConstCharCrcString.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) __Instance) = *((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) _0.__Instance);
            }

            public static global::UtinniCore.Utinni.ConstCharCrcString Ctor(string str)
            {
                var __ret = __Internal.Ctor(str);
                global::UtinniCore.Utinni.ConstCharCrcString __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.ConstCharCrcString.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.ConstCharCrcString) global::UtinniCore.Utinni.ConstCharCrcString.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.ConstCharCrcString.__CreateInstance(__ret);
                return __result0;
            }

            public string Buffer
            {
                get
                {
                    if (((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) __Instance)->buffer == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) ((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) __Instance)->buffer;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*) __Instance)->buffer, __length);
                }

                set
                {
                    byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    fixed (byte* __bytePtr0 = __bytes0)
                    {
                        ((global::UtinniCore.Utinni.ConstCharCrcString.__Internal*)__Instance)->buffer = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                    }
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class Hardpoint : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::UtinniCore.Utinni.PersistentCrcString.__Internal name;

                [FieldOffset(16)]
                internal global::UtinniCore.Swg.Math.Transform.__Internal Transform;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Hardpoint@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Hardpoint@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Hardpoint> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Hardpoint>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Hardpoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Hardpoint(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Hardpoint __CreateInstance(global::UtinniCore.Utinni.Hardpoint.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Hardpoint(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Hardpoint.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Hardpoint.__Internal));
                *(global::UtinniCore.Utinni.Hardpoint.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Hardpoint(global::UtinniCore.Utinni.Hardpoint.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Hardpoint(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Hardpoint()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Hardpoint.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public Hardpoint(global::UtinniCore.Utinni.Hardpoint _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Hardpoint.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Hardpoint.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Hardpoint.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Hardpoint __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public global::UtinniCore.Utinni.PersistentCrcString Name
            {
                get
                {
                    return global::UtinniCore.Utinni.PersistentCrcString.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Hardpoint.__Internal*) __Instance)->name));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Hardpoint.__Internal*)__Instance)->name = *(global::UtinniCore.Utinni.PersistentCrcString.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Transform Transform
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Hardpoint.__Internal*) __Instance)->Transform));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Hardpoint.__Internal*)__Instance)->Transform = *(global::UtinniCore.Swg.Math.Transform.__Internal*) value.__Instance;
                }
            }
        }

        public unsafe partial class AppearanceTemplate : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal int referenceCount;

                [FieldOffset(8)]
                internal global::System.IntPtr m_crcName;

                [FieldOffset(12)]
                internal global::System.IntPtr unk01;

                [FieldOffset(16)]
                internal global::System.IntPtr unk02;

                [FieldOffset(20)]
                internal global::System.IntPtr hardpoints;

                [FieldOffset(24)]
                internal global::System.IntPtr floorName;

                [FieldOffset(28)]
                internal global::System.IntPtr unk03;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0AppearanceTemplate@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AppearanceTemplate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AppearanceTemplate>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.AppearanceTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AppearanceTemplate(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.AppearanceTemplate __CreateInstance(global::UtinniCore.Utinni.AppearanceTemplate.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AppearanceTemplate(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.AppearanceTemplate.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AppearanceTemplate.__Internal));
                *(global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private AppearanceTemplate(global::UtinniCore.Utinni.AppearanceTemplate.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected AppearanceTemplate(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public AppearanceTemplate()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AppearanceTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public AppearanceTemplate(global::UtinniCore.Utinni.AppearanceTemplate _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AppearanceTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance) = *((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.AppearanceTemplate __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public int ReferenceCount
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->referenceCount;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->referenceCount = value;
                }
            }

            public global::UtinniCore.Utinni.PersistentCrcString MCrcName
            {
                get
                {
                    global::UtinniCore.Utinni.PersistentCrcString __result0;
                    if (((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->m_crcName == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.PersistentCrcString.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->m_crcName))
                        __result0 = (global::UtinniCore.Utinni.PersistentCrcString) global::UtinniCore.Utinni.PersistentCrcString.NativeToManagedMap[((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->m_crcName];
                    else __result0 = global::UtinniCore.Utinni.PersistentCrcString.__CreateInstance(((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->m_crcName);
                    return __result0;
                }
            }

            public uint* Unk01
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->unk01 = (global::System.IntPtr) value;
                }
            }

            public uint* Unk02
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->unk02 = (global::System.IntPtr) value;
                }
            }

            public sbyte* FloorName
            {
                get
                {
                    return (sbyte*) ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->floorName;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->floorName = (global::System.IntPtr) value;
                }
            }

            public uint* Unk03
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*) __Instance)->unk03;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AppearanceTemplate.__Internal*)__Instance)->unk03 = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class Appearance : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 84)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::System.IntPtr appearanceTemplate;

                [FieldOffset(8)]
                internal global::System.IntPtr extent;

                [FieldOffset(12)]
                internal global::System.IntPtr ownerObject;

                [FieldOffset(16)]
                internal int renderedFrameCount;

                [FieldOffset(20)]
                internal global::UtinniCore.Swg.Math.Vector.__Internal scale;

                [FieldOffset(32)]
                internal byte keepAlive;

                [FieldOffset(33)]
                internal byte useRenderEffectsFlag;

                [FieldOffset(34)]
                internal byte allowShadowBlob;

                [FieldOffset(36)]
                internal global::UtinniCore.Swg.Math.Transform.__Internal appearanceToWorld;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Appearance@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Appearance@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Appearance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Appearance>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Appearance __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Appearance(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Appearance __CreateInstance(global::UtinniCore.Utinni.Appearance.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Appearance(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Appearance.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Appearance.__Internal));
                *(global::UtinniCore.Utinni.Appearance.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Appearance(global::UtinniCore.Utinni.Appearance.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Appearance(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Appearance()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Appearance.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public Appearance(global::UtinniCore.Utinni.Appearance _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Appearance.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Appearance.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Appearance __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public global::UtinniCore.Utinni.AppearanceTemplate AppearanceTemplate
            {
                get
                {
                    global::UtinniCore.Utinni.AppearanceTemplate __result0;
                    if (((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->appearanceTemplate == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.AppearanceTemplate.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->appearanceTemplate))
                        __result0 = (global::UtinniCore.Utinni.AppearanceTemplate) global::UtinniCore.Utinni.AppearanceTemplate.NativeToManagedMap[((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->appearanceTemplate];
                    else __result0 = global::UtinniCore.Utinni.AppearanceTemplate.__CreateInstance(((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->appearanceTemplate);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->appearanceTemplate = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint* Extent
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->extent;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->extent = (global::System.IntPtr) value;
                }
            }

            public global::UtinniCore.Utinni.Object OwnerObject
            {
                get
                {
                    global::UtinniCore.Utinni.Object __result0;
                    if (((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->ownerObject == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->ownerObject))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->ownerObject];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->ownerObject);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->ownerObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public int RenderedFrameCount
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->renderedFrameCount;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->renderedFrameCount = value;
                }
            }

            public global::UtinniCore.Swg.Math.Vector Scale
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->scale));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->scale = *(global::UtinniCore.Swg.Math.Vector.__Internal*) value.__Instance;
                }
            }

            public bool KeepAlive
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->keepAlive != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->keepAlive = (byte) (value ? 1 : 0);
                }
            }

            public bool UseRenderEffectsFlag
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->useRenderEffectsFlag != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->useRenderEffectsFlag = (byte) (value ? 1 : 0);
                }
            }

            public bool AllowShadowBlob
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->allowShadowBlob != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->allowShadowBlob = (byte) (value ? 1 : 0);
                }
            }

            public global::UtinniCore.Swg.Math.Transform AppearanceToWorld
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Appearance.__Internal*) __Instance)->appearanceToWorld));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Appearance.__Internal*)__Instance)->appearanceToWorld = *(global::UtinniCore.Swg.Math.Transform.__Internal*) value.__Instance;
                }
            }
        }

        public unsafe partial class CellProperty : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CellProperty@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setPortalTransitions@CellProperty@utinni@@SAX_N@Z")]
                internal static extern void SetPortalTransitions(bool enabled);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getParentCell@CellProperty@utinni@@QAEKXZ")]
                internal static extern uint GetParentCell(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CellProperty> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CellProperty>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.CellProperty __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CellProperty(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.CellProperty __CreateInstance(global::UtinniCore.Utinni.CellProperty.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CellProperty(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.CellProperty.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CellProperty.__Internal));
                *(global::UtinniCore.Utinni.CellProperty.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private CellProperty(global::UtinniCore.Utinni.CellProperty.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected CellProperty(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public CellProperty()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CellProperty.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public CellProperty(global::UtinniCore.Utinni.CellProperty _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CellProperty.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.CellProperty.__Internal*) __Instance) = *((global::UtinniCore.Utinni.CellProperty.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.CellProperty __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void SetPortalTransitions(bool enabled)
            {
                __Internal.SetPortalTransitions(enabled);
            }

            public uint ParentCell
            {
                get
                {
                    var __ret = __Internal.GetParentCell(__Instance);
                    return __ret;
                }
            }
        }

        public unsafe partial class PortalPropertyTemplate : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0PortalPropertyTemplate@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getCrc@PortalPropertyTemplate@utinni@@QAEHXZ")]
                internal static extern int GetCrc(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getCellCount@PortalPropertyTemplate@utinni@@QAEHXZ")]
                internal static extern int GetCellCount(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getExteriorAppearanceName@PortalPropertyTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetExteriorAppearanceName(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.PortalPropertyTemplate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.PortalPropertyTemplate>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.PortalPropertyTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PortalPropertyTemplate(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.PortalPropertyTemplate __CreateInstance(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PortalPropertyTemplate(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal));
                *(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private PortalPropertyTemplate(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected PortalPropertyTemplate(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public PortalPropertyTemplate()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public PortalPropertyTemplate(global::UtinniCore.Utinni.PortalPropertyTemplate _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal*) __Instance) = *((global::UtinniCore.Utinni.PortalPropertyTemplate.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.PortalPropertyTemplate __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public int Crc
            {
                get
                {
                    var __ret = __Internal.GetCrc(__Instance);
                    return __ret;
                }
            }

            public int CellCount
            {
                get
                {
                    var __ret = __Internal.GetCellCount(__Instance);
                    return __ret;
                }
            }

            public string ExteriorAppearanceName
            {
                get
                {
                    var __ret = __Internal.GetExteriorAppearanceName(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }
        }

        public unsafe partial class PortalPropertyTemplateList : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0PortalPropertyTemplateList@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getPobByCrcString@PortalPropertyTemplateList@utinni@@SAPAVPortalPropertyTemplate@2@PAUPersistentCrcString@2@@Z")]
                internal static extern global::System.IntPtr GetPobByCrcString(global::System.IntPtr pobCrcString);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.PortalPropertyTemplateList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.PortalPropertyTemplateList>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.PortalPropertyTemplateList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PortalPropertyTemplateList(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.PortalPropertyTemplateList __CreateInstance(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.PortalPropertyTemplateList(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal));
                *(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private PortalPropertyTemplateList(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected PortalPropertyTemplateList(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public PortalPropertyTemplateList()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public PortalPropertyTemplateList(global::UtinniCore.Utinni.PortalPropertyTemplateList _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal*) __Instance) = *((global::UtinniCore.Utinni.PortalPropertyTemplateList.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.PortalPropertyTemplateList __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::UtinniCore.Utinni.PortalPropertyTemplate GetPobByCrcString(global::UtinniCore.Utinni.PersistentCrcString pobCrcString)
            {
                var __arg0 = ReferenceEquals(pobCrcString, null) ? global::System.IntPtr.Zero : pobCrcString.__Instance;
                var __ret = __Internal.GetPobByCrcString(__arg0);
                global::UtinniCore.Utinni.PortalPropertyTemplate __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.PortalPropertyTemplate.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.PortalPropertyTemplate) global::UtinniCore.Utinni.PortalPropertyTemplate.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.PortalPropertyTemplate.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class ClientObject
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.ClientObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.ClientObject>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.ClientObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ClientObject(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.ClientObject __CreateInstance(global::UtinniCore.Utinni.ClientObject.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ClientObject(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.ClientObject.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ClientObject.__Internal));
                *(global::UtinniCore.Utinni.ClientObject.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ClientObject(global::UtinniCore.Utinni.ClientObject.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ClientObject(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }
        }

        public unsafe partial class ObjectTemplate : global::UtinniCore.Utinni.DataResource, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::UtinniCore.Utinni.PersistentCrcString.__Internal name;

                [FieldOffset(20)]
                internal int referenceCount;

                [FieldOffset(24)]
                internal global::System.IntPtr baseData;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ObjectTemplate@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?createObject@ObjectTemplate@utinni@@SAPAVObject@2@PBD@Z")]
                internal static extern global::System.IntPtr CreateObject([MarshalAs(UnmanagedType.LPUTF8Str)] string filename);
            }

            internal static new global::UtinniCore.Utinni.ObjectTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ObjectTemplate(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.ObjectTemplate __CreateInstance(global::UtinniCore.Utinni.ObjectTemplate.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ObjectTemplate(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.ObjectTemplate.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplate.__Internal));
                *(global::UtinniCore.Utinni.ObjectTemplate.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ObjectTemplate(global::UtinniCore.Utinni.ObjectTemplate.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ObjectTemplate(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public ObjectTemplate()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public ObjectTemplate(global::UtinniCore.Utinni.ObjectTemplate _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) __Instance) = *((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) _0.__Instance);
            }

            public static global::UtinniCore.Utinni.Object CreateObject(string filename)
            {
                var __ret = __Internal.CreateObject(filename);
                global::UtinniCore.Utinni.Object __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(__ret);
                return __result0;
            }

            public global::UtinniCore.Utinni.ObjectTemplate BaseData
            {
                get
                {
                    global::UtinniCore.Utinni.ObjectTemplate __result0;
                    if (((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) __Instance)->baseData == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.ObjectTemplate.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) __Instance)->baseData))
                        __result0 = (global::UtinniCore.Utinni.ObjectTemplate) global::UtinniCore.Utinni.ObjectTemplate.NativeToManagedMap[((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) __Instance)->baseData];
                    else __result0 = global::UtinniCore.Utinni.ObjectTemplate.__CreateInstance(((global::UtinniCore.Utinni.ObjectTemplate.__Internal*) __Instance)->baseData);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.ObjectTemplate.__Internal*)__Instance)->baseData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class SharedObjectTemplate : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0SharedObjectTemplate@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getAppearanceFilename@SharedObjectTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetAppearanceFilename(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getPortalLayoutFilename@SharedObjectTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetPortalLayoutFilename(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getClientDataFilename@SharedObjectTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetClientDataFilename(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getGameObjectType@SharedObjectTemplate@utinni@@QAEHXZ")]
                internal static extern int GetGameObjectType(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.SharedObjectTemplate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.SharedObjectTemplate>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.SharedObjectTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.SharedObjectTemplate(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.SharedObjectTemplate __CreateInstance(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.SharedObjectTemplate(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal));
                *(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private SharedObjectTemplate(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected SharedObjectTemplate(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public SharedObjectTemplate()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public SharedObjectTemplate(global::UtinniCore.Utinni.SharedObjectTemplate _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.SharedObjectTemplate.__Internal*) __Instance) = *((global::UtinniCore.Utinni.SharedObjectTemplate.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.SharedObjectTemplate __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public string AppearanceFilename
            {
                get
                {
                    var __ret = __Internal.GetAppearanceFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }

            public string PortalLayoutFilename
            {
                get
                {
                    var __ret = __Internal.GetPortalLayoutFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }

            public string ClientDataFilename
            {
                get
                {
                    var __ret = __Internal.GetClientDataFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }

            public int GameObjectType
            {
                get
                {
                    var __ret = __Internal.GetGameObjectType(__Instance);
                    return __ret;
                }
            }
        }

        public unsafe partial class SharedBuildingObjectTemplate : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0SharedBuildingObjectTemplate@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getTerrainLayerFilename@SharedBuildingObjectTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetTerrainLayerFilename(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getInteriorLayoutFilename@SharedBuildingObjectTemplate@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetInteriorLayoutFilename(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.SharedBuildingObjectTemplate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.SharedBuildingObjectTemplate>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.SharedBuildingObjectTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.SharedBuildingObjectTemplate(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.SharedBuildingObjectTemplate __CreateInstance(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.SharedBuildingObjectTemplate(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal));
                *(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private SharedBuildingObjectTemplate(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected SharedBuildingObjectTemplate(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public SharedBuildingObjectTemplate()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public SharedBuildingObjectTemplate(global::UtinniCore.Utinni.SharedBuildingObjectTemplate _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal*) __Instance) = *((global::UtinniCore.Utinni.SharedBuildingObjectTemplate.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.SharedBuildingObjectTemplate __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public string TerrainLayerFilename
            {
                get
                {
                    var __ret = __Internal.GetTerrainLayerFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }

            public string InteriorLayoutFilename
            {
                get
                {
                    var __ret = __Internal.GetInteriorLayoutFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }
        }

        public unsafe partial class ObjectTemplateList : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ObjectTemplateList@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getObjectTemplateByFilename@ObjectTemplateList@utinni@@SAPAVSharedObjectTemplate@2@PBD@Z")]
                internal static extern global::System.IntPtr GetObjectTemplateByFilename([MarshalAs(UnmanagedType.LPUTF8Str)] string filename);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getObjectTemplateByIff@ObjectTemplateList@utinni@@SAPAVSharedObjectTemplate@2@K@Z")]
                internal static extern global::System.IntPtr GetObjectTemplateByIff(uint iff);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCrcStringByCrc@ObjectTemplateList@utinni@@SA?BUConstCharCrcString@2@I@Z")]
                internal static extern void GetCrcStringByCrc(global::System.IntPtr @return, uint crc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCrcStringByName@ObjectTemplateList@utinni@@SA?AUConstCharCrcString@2@PBD@Z")]
                internal static extern void GetCrcStringByName(global::System.IntPtr @return, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getCrcStringByNameAsDWORD@ObjectTemplateList@utinni@@SAKPBD@Z")]
                internal static extern uint GetCrcStringByNameAsDWORD([MarshalAs(UnmanagedType.LPUTF8Str)] string name);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.ObjectTemplateList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.ObjectTemplateList>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.ObjectTemplateList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ObjectTemplateList(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.ObjectTemplateList __CreateInstance(global::UtinniCore.Utinni.ObjectTemplateList.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.ObjectTemplateList(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.ObjectTemplateList.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplateList.__Internal));
                *(global::UtinniCore.Utinni.ObjectTemplateList.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ObjectTemplateList(global::UtinniCore.Utinni.ObjectTemplateList.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ObjectTemplateList(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ObjectTemplateList()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplateList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public ObjectTemplateList(global::UtinniCore.Utinni.ObjectTemplateList _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.ObjectTemplateList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.ObjectTemplateList.__Internal*) __Instance) = *((global::UtinniCore.Utinni.ObjectTemplateList.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.ObjectTemplateList __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::UtinniCore.Utinni.SharedObjectTemplate GetObjectTemplateByFilename(string filename)
            {
                var __ret = __Internal.GetObjectTemplateByFilename(filename);
                global::UtinniCore.Utinni.SharedObjectTemplate __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.SharedObjectTemplate.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.SharedObjectTemplate) global::UtinniCore.Utinni.SharedObjectTemplate.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.SharedObjectTemplate.__CreateInstance(__ret);
                return __result0;
            }

            public static global::UtinniCore.Utinni.SharedObjectTemplate GetObjectTemplateByIff(uint iff)
            {
                var __ret = __Internal.GetObjectTemplateByIff(iff);
                global::UtinniCore.Utinni.SharedObjectTemplate __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.SharedObjectTemplate.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.SharedObjectTemplate) global::UtinniCore.Utinni.SharedObjectTemplate.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.SharedObjectTemplate.__CreateInstance(__ret);
                return __result0;
            }

            public static global::UtinniCore.Utinni.ConstCharCrcString GetCrcStringByCrc(uint crc)
            {
                var __ret = new global::UtinniCore.Utinni.ConstCharCrcString.__Internal();
                __Internal.GetCrcStringByCrc(new IntPtr(&__ret), crc);
                return global::UtinniCore.Utinni.ConstCharCrcString.__CreateInstance(__ret);
            }

            public static global::UtinniCore.Utinni.ConstCharCrcString GetCrcStringByName(string name)
            {
                var __ret = new global::UtinniCore.Utinni.ConstCharCrcString.__Internal();
                __Internal.GetCrcStringByName(new IntPtr(&__ret), name);
                return global::UtinniCore.Utinni.ConstCharCrcString.__CreateInstance(__ret);
            }

            public static uint GetCrcStringByNameAsDWORD(string name)
            {
                var __ret = __Internal.GetCrcStringByNameAsDWORD(name);
                return __ret;
            }
        }

        public unsafe partial class Object : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 160)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint unk01;

                [FieldOffset(8)]
                internal uint unk02;

                [FieldOffset(12)]
                internal uint unk03;

                [FieldOffset(16)]
                internal global::System.IntPtr objectTemplate;

                [FieldOffset(20)]
                internal uint unk04;

                [FieldOffset(24)]
                internal global::System.IntPtr name;

                [FieldOffset(32)]
                internal long networkId;

                [FieldOffset(40)]
                internal global::System.IntPtr appearance;

                [FieldOffset(44)]
                internal global::System.IntPtr controller;

                [FieldOffset(48)]
                internal uint unk07;

                [FieldOffset(52)]
                internal global::System.IntPtr parentObject;

                [FieldOffset(56)]
                internal uint unk08;

                [FieldOffset(60)]
                internal global::System.IntPtr dpvsObjects;

                [FieldOffset(64)]
                internal int rotations;

                [FieldOffset(68)]
                internal global::UtinniCore.Swg.Math.Vector.__Internal scale;

                [FieldOffset(80)]
                internal global::UtinniCore.Swg.Math.Transform.__Internal objectToParent;

                [FieldOffset(128)]
                internal global::System.IntPtr objectToWorld;

                [FieldOffset(132)]
                internal uint unk09;

                [FieldOffset(136)]
                internal global::System.IntPtr container;

                [FieldOffset(140)]
                internal global::System.IntPtr CollisionProperty;

                [FieldOffset(144)]
                internal global::System.IntPtr SpatialSubdivisionHandle;

                [FieldOffset(148)]
                internal byte unk10;

                [FieldOffset(149)]
                internal byte unk11;

                [FieldOffset(150)]
                internal byte unk12;

                [FieldOffset(151)]
                internal byte unk13;

                [FieldOffset(152)]
                internal uint unk14;

                [FieldOffset(156)]
                internal uint containedBy;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Object@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Object@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getObjectById@Object@utinni@@SAPAV12@K@Z")]
                internal static extern global::System.IntPtr GetObjectById(uint networkIdPointer);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?remove@Object@utinni@@QAEXXZ")]
                internal static extern void Remove(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?rotate_o2w@Object@utinni@@QAE?BUVector@math@swg@@PBU345@0@Z")]
                internal static extern void RotateO2w(global::System.IntPtr __instance, global::System.IntPtr @return, global::System.IntPtr o2w, global::System.IntPtr pointInSpace);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addToWorld@Object@utinni@@QAEXXZ")]
                internal static extern void AddToWorld(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?removeFromWorld@Object@utinni@@QAEXXZ")]
                internal static extern void RemoveFromWorld(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setAppearance@Object@utinni@@QAEXPAVAppearance@2@@Z")]
                internal static extern void SetAppearance(global::System.IntPtr __instance, global::System.IntPtr appearance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addNotification@Object@utinni@@QAEXK_N@Z")]
                internal static extern void AddNotification(global::System.IntPtr __instance, uint notification, bool allowWhenInWorld);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setObjectToWorldDirty@Object@utinni@@QAEX_N@Z")]
                internal static extern void SetObjectToWorldDirty(global::System.IntPtr __instance, bool isDirty);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?positionAndRotationChanged@Object@utinni@@QAEX_NAAUVector@math@swg@@@Z")]
                internal static extern void PositionAndRotationChanged(global::System.IntPtr __instance, bool dueToParentChange, global::System.IntPtr oldPosition);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ctor@Object@utinni@@SAPAV12@XZ")]
                internal static extern global::System.IntPtr Ctor();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getTransform_o2w@Object@utinni@@QAEPAUTransform@math@swg@@XZ")]
                internal static extern global::System.IntPtr GetTransformO2w(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setTransform_o2w@Object@utinni@@QAEXAAUTransform@math@swg@@@Z")]
                internal static extern void SetTransformO2w(global::System.IntPtr __instance, global::System.IntPtr object2world);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getParentCell@Object@utinni@@QAEKXZ")]
                internal static extern uint GetParentCell(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getClientObject@Object@utinni@@QAEPAVClientObject@2@XZ")]
                internal static extern global::System.IntPtr GetClientObject(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getTemplateFilename@Object@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetTemplateFilename(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getAppearanceFilename@Object@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetAppearanceFilename(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Object> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Object>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Object __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Object(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Object __CreateInstance(global::UtinniCore.Utinni.Object.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Object(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Object.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Object.__Internal));
                *(global::UtinniCore.Utinni.Object.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Object(global::UtinniCore.Utinni.Object.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Object(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Object()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Object.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public Object(global::UtinniCore.Utinni.Object _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Object.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Object.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Object.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Object __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void Remove()
            {
                __Internal.Remove(__Instance);
            }

            public global::UtinniCore.Swg.Math.Vector RotateO2w(global::UtinniCore.Swg.Math.Vector o2w, global::UtinniCore.Swg.Math.Vector pointInSpace)
            {
                var __arg0 = ReferenceEquals(o2w, null) ? global::System.IntPtr.Zero : o2w.__Instance;
                var __arg1 = ReferenceEquals(pointInSpace, null) ? global::System.IntPtr.Zero : pointInSpace.__Instance;
                var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                __Internal.RotateO2w(__Instance, new IntPtr(&__ret), __arg0, __arg1);
                return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
            }

            public void AddToWorld()
            {
                __Internal.AddToWorld(__Instance);
            }

            public void RemoveFromWorld()
            {
                __Internal.RemoveFromWorld(__Instance);
            }

            public void SetAppearance(global::UtinniCore.Utinni.Appearance appearance)
            {
                var __arg0 = ReferenceEquals(appearance, null) ? global::System.IntPtr.Zero : appearance.__Instance;
                __Internal.SetAppearance(__Instance, __arg0);
            }

            public void AddNotification(uint notification, bool allowWhenInWorld)
            {
                __Internal.AddNotification(__Instance, notification, allowWhenInWorld);
            }

            public void SetObjectToWorldDirty(bool isDirty)
            {
                __Internal.SetObjectToWorldDirty(__Instance, isDirty);
            }

            public void PositionAndRotationChanged(bool dueToParentChange, global::UtinniCore.Swg.Math.Vector oldPosition)
            {
                if (ReferenceEquals(oldPosition, null))
                    throw new global::System.ArgumentNullException("oldPosition", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = oldPosition.__Instance;
                __Internal.PositionAndRotationChanged(__Instance, dueToParentChange, __arg1);
            }

            public static global::UtinniCore.Utinni.Object GetObjectById(uint networkIdPointer)
            {
                var __ret = __Internal.GetObjectById(networkIdPointer);
                global::UtinniCore.Utinni.Object __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(__ret);
                return __result0;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk01 = value;
                }
            }

            public uint Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk02 = value;
                }
            }

            public uint Unk03
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk03;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk03 = value;
                }
            }

            public global::UtinniCore.Utinni.ObjectTemplate ObjectTemplate
            {
                get
                {
                    global::UtinniCore.Utinni.ObjectTemplate __result0;
                    if (((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectTemplate == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.ObjectTemplate.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectTemplate))
                        __result0 = (global::UtinniCore.Utinni.ObjectTemplate) global::UtinniCore.Utinni.ObjectTemplate.NativeToManagedMap[((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectTemplate];
                    else __result0 = global::UtinniCore.Utinni.ObjectTemplate.__CreateInstance(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectTemplate);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->objectTemplate = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint Unk04
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk04;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk04 = value;
                }
            }

            public sbyte* Name
            {
                get
                {
                    return (sbyte*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->name;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->name = (global::System.IntPtr) value;
                }
            }

            public long NetworkId
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->networkId;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->networkId = value;
                }
            }

            public global::UtinniCore.Utinni.Appearance Appearance
            {
                get
                {
                    global::UtinniCore.Utinni.Appearance __result0;
                    if (((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->appearance == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Appearance.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->appearance))
                        __result0 = (global::UtinniCore.Utinni.Appearance) global::UtinniCore.Utinni.Appearance.NativeToManagedMap[((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->appearance];
                    else __result0 = global::UtinniCore.Utinni.Appearance.__CreateInstance(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->appearance);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->appearance = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::UtinniCore.Utinni.Controller Controller
            {
                get
                {
                    global::UtinniCore.Utinni.Controller __result0;
                    if (((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->controller == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Controller.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->controller))
                        __result0 = (global::UtinniCore.Utinni.Controller) global::UtinniCore.Utinni.Controller.NativeToManagedMap[((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->controller];
                    else __result0 = global::UtinniCore.Utinni.Controller.__CreateInstance(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->controller);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->controller = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint Unk07
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk07;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk07 = value;
                }
            }

            public global::UtinniCore.Utinni.Object ParentObject
            {
                get
                {
                    global::UtinniCore.Utinni.Object __result0;
                    if (((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->parentObject == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->parentObject))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->parentObject];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->parentObject);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->parentObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint Unk08
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk08;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk08 = value;
                }
            }

            public uint* DpvsObjects
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->dpvsObjects;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->dpvsObjects = (global::System.IntPtr) value;
                }
            }

            public int Rotations
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->rotations;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->rotations = value;
                }
            }

            public global::UtinniCore.Swg.Math.Vector Scale
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->scale));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->scale = *(global::UtinniCore.Swg.Math.Vector.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Transform ObjectToParent
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Transform.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectToParent));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->objectToParent = *(global::UtinniCore.Swg.Math.Transform.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Transform ObjectToWorld
            {
                get
                {
                    global::UtinniCore.Swg.Math.Transform __result0;
                    if (((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectToWorld == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Swg.Math.Transform.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectToWorld))
                        __result0 = (global::UtinniCore.Swg.Math.Transform) global::UtinniCore.Swg.Math.Transform.NativeToManagedMap[((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectToWorld];
                    else __result0 = global::UtinniCore.Swg.Math.Transform.__CreateInstance(((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->objectToWorld);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->objectToWorld = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint Unk09
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk09;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk09 = value;
                }
            }

            public uint* Container
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->container;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->container = (global::System.IntPtr) value;
                }
            }

            public uint* CollisionProperty
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->CollisionProperty;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->CollisionProperty = (global::System.IntPtr) value;
                }
            }

            public uint* SpatialSubdivisionHandle
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->SpatialSubdivisionHandle;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->SpatialSubdivisionHandle = (global::System.IntPtr) value;
                }
            }

            public byte Unk10
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk10;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk10 = value;
                }
            }

            public byte Unk11
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk11;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk11 = value;
                }
            }

            public byte Unk12
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk12;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk12 = value;
                }
            }

            public byte Unk13
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk13;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk13 = value;
                }
            }

            public uint Unk14
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->unk14;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->unk14 = value;
                }
            }

            public uint ContainedBy
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Object.__Internal*) __Instance)->containedBy;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Object.__Internal*)__Instance)->containedBy = value;
                }
            }

            public static global::UtinniCore.Utinni.Object Ctor
            {
                get
                {
                    var __ret = __Internal.Ctor();
                    global::UtinniCore.Utinni.Object __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(__ret);
                    return __result0;
                }
            }

            public global::UtinniCore.Swg.Math.Transform TransformO2w
            {
                get
                {
                    var __ret = __Internal.GetTransformO2w(__Instance);
                    global::UtinniCore.Swg.Math.Transform __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Swg.Math.Transform.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Swg.Math.Transform) global::UtinniCore.Swg.Math.Transform.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Swg.Math.Transform.__CreateInstance(__ret);
                    return __result0;
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = value.__Instance;
                    __Internal.SetTransformO2w(__Instance, __arg0);
                }
            }

            public uint ParentCell
            {
                get
                {
                    var __ret = __Internal.GetParentCell(__Instance);
                    return __ret;
                }
            }

            public global::UtinniCore.Utinni.ClientObject ClientObject
            {
                get
                {
                    var __ret = __Internal.GetClientObject(__Instance);
                    global::UtinniCore.Utinni.ClientObject __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.ClientObject.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Utinni.ClientObject) global::UtinniCore.Utinni.ClientObject.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Utinni.ClientObject.__CreateInstance(__ret);
                    return __result0;
                }
            }

            public string TemplateFilename
            {
                get
                {
                    var __ret = __Internal.GetTemplateFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }

            public string AppearanceFilename
            {
                get
                {
                    var __ret = __Internal.GetAppearanceFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }
        }

        public unsafe partial class AutoVariableBase : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0AutoVariableBase@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AutoVariableBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AutoVariableBase>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.AutoVariableBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoVariableBase(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.AutoVariableBase __CreateInstance(global::UtinniCore.Utinni.AutoVariableBase.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoVariableBase(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.AutoVariableBase.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoVariableBase.__Internal));
                *(global::UtinniCore.Utinni.AutoVariableBase.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private AutoVariableBase(global::UtinniCore.Utinni.AutoVariableBase.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected AutoVariableBase(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public AutoVariableBase()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoVariableBase.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public AutoVariableBase(global::UtinniCore.Utinni.AutoVariableBase _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoVariableBase.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.AutoVariableBase.__Internal*) __Instance) = *((global::UtinniCore.Utinni.AutoVariableBase.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.AutoVariableBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AutoVariableBase.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoVariableBase.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class AutoDeltaVariableBase : global::UtinniCore.Utinni.AutoVariableBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal ushort index;

                [FieldOffset(8)]
                internal global::System.IntPtr parent;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0AutoDeltaVariableBase@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::UtinniCore.Utinni.AutoDeltaVariableBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoDeltaVariableBase(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.AutoDeltaVariableBase __CreateInstance(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoDeltaVariableBase(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal));
                *(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private AutoDeltaVariableBase(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected AutoDeltaVariableBase(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public AutoDeltaVariableBase()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public AutoDeltaVariableBase(global::UtinniCore.Utinni.AutoDeltaVariableBase _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*) __Instance) = *((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*) _0.__Instance);
            }

            public ushort Index
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*) __Instance)->index;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*)__Instance)->index = value;
                }
            }

            public uint* Parent
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*) __Instance)->parent;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaVariableBase.__Internal*)__Instance)->parent = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class AutoDeltaByteStream : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint unk01;

                [FieldOffset(4)]
                internal uint unk02;

                [FieldOffset(8)]
                internal uint unk03;

                [FieldOffset(12)]
                internal uint unk04;

                [FieldOffset(16)]
                internal uint unk05;

                [FieldOffset(20)]
                internal uint unk06;

                [FieldOffset(24)]
                internal uint unk07;

                [FieldOffset(28)]
                internal uint unk08;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0AutoDeltaByteStream@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AutoDeltaByteStream> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.AutoDeltaByteStream>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.AutoDeltaByteStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoDeltaByteStream(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.AutoDeltaByteStream __CreateInstance(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.AutoDeltaByteStream(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal));
                *(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private AutoDeltaByteStream(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected AutoDeltaByteStream(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public AutoDeltaByteStream()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public AutoDeltaByteStream(global::UtinniCore.Utinni.AutoDeltaByteStream _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance) = *((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.AutoDeltaByteStream __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk01 = value;
                }
            }

            public uint Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk02 = value;
                }
            }

            public uint Unk03
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk03;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk03 = value;
                }
            }

            public uint Unk04
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk04;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk04 = value;
                }
            }

            public uint Unk05
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk05;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk05 = value;
                }
            }

            public uint Unk06
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk06;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk06 = value;
                }
            }

            public uint Unk07
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk07;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk07 = value;
                }
            }

            public uint Unk08
            {
                get
                {
                    return ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*) __Instance)->unk08;
                }

                set
                {
                    ((global::UtinniCore.Utinni.AutoDeltaByteStream.__Internal*)__Instance)->unk08 = value;
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class Scene : global::UtinniCore.Utinni.IoWin, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::System.IntPtr name;

                [FieldOffset(8)]
                internal global::System.IntPtr ioWin;

                [FieldOffset(12)]
                internal uint unk01;

                [FieldOffset(16)]
                internal uint unk02;

                [FieldOffset(20)]
                internal uint unk03;

                [FieldOffset(24)]
                internal uint unk04;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Scene@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::UtinniCore.Utinni.Scene __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Scene(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Scene __CreateInstance(global::UtinniCore.Utinni.Scene.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Scene(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Scene.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Scene.__Internal));
                *(global::UtinniCore.Utinni.Scene.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Scene(global::UtinniCore.Utinni.Scene.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Scene(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public Scene()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Scene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Scene(global::UtinniCore.Utinni.Scene _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Scene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Scene.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Scene.__Internal*) _0.__Instance);
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Scene.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Scene.__Internal*)__Instance)->unk01 = value;
                }
            }

            public uint Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Scene.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Scene.__Internal*)__Instance)->unk02 = value;
                }
            }

            public uint Unk03
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Scene.__Internal*) __Instance)->unk03;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Scene.__Internal*)__Instance)->unk03 = value;
                }
            }

            public uint Unk04
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Scene.__Internal*) __Instance)->unk04;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Scene.__Internal*)__Instance)->unk04 = value;
                }
            }
        }

        public unsafe partial class NetworkScene : global::UtinniCore.Utinni.Scene, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 76)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::System.IntPtr name;

                [FieldOffset(8)]
                internal global::System.IntPtr ioWin;

                [FieldOffset(12)]
                internal uint unk01;

                [FieldOffset(16)]
                internal uint unk02;

                [FieldOffset(20)]
                internal uint unk03;

                [FieldOffset(24)]
                internal uint unk04;

                [FieldOffset(28)]
                internal global::System.IntPtr playerObject;

                [FieldOffset(32)]
                internal uint unk011;

                [FieldOffset(36)]
                internal uint unk021;

                [FieldOffset(40)]
                internal uint unk031;

                [FieldOffset(44)]
                internal uint unk041;

                [FieldOffset(48)]
                internal uint unk05;

                [FieldOffset(52)]
                internal uint unk06;

                [FieldOffset(56)]
                internal uint unk07;

                [FieldOffset(60)]
                internal uint unk08;

                [FieldOffset(64)]
                internal uint unk09;

                [FieldOffset(68)]
                internal uint unk10;

                [FieldOffset(72)]
                internal uint unk11;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0NetworkScene@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::UtinniCore.Utinni.NetworkScene __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.NetworkScene(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.NetworkScene __CreateInstance(global::UtinniCore.Utinni.NetworkScene.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.NetworkScene(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.NetworkScene.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.NetworkScene.__Internal));
                *(global::UtinniCore.Utinni.NetworkScene.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private NetworkScene(global::UtinniCore.Utinni.NetworkScene.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected NetworkScene(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public NetworkScene()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.NetworkScene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public NetworkScene(global::UtinniCore.Utinni.NetworkScene _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.NetworkScene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance) = *((global::UtinniCore.Utinni.NetworkScene.__Internal*) _0.__Instance);
            }

            public global::UtinniCore.Utinni.Object PlayerObject
            {
                get
                {
                    global::UtinniCore.Utinni.Object __result0;
                    if (((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->playerObject == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->playerObject))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->playerObject];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->playerObject);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->playerObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk011;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk011 = value;
                }
            }

            public uint Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk021;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk021 = value;
                }
            }

            public uint Unk03
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk031;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk031 = value;
                }
            }

            public uint Unk04
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk041;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk041 = value;
                }
            }

            public uint Unk05
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk05;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk05 = value;
                }
            }

            public uint Unk06
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk06;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk06 = value;
                }
            }

            public uint Unk07
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk07;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk07 = value;
                }
            }

            public uint Unk08
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk08;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk08 = value;
                }
            }

            public uint Unk09
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk09;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk09 = value;
                }
            }

            public uint Unk10
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk10;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk10 = value;
                }
            }

            public uint Unk11
            {
                get
                {
                    return ((global::UtinniCore.Utinni.NetworkScene.__Internal*) __Instance)->unk11;
                }

                set
                {
                    ((global::UtinniCore.Utinni.NetworkScene.__Internal*)__Instance)->unk11 = value;
                }
            }
        }
    }

    namespace Utinni
    {
        public enum CameraProjectionMode
        {
            PmPerspective = 0,
            PmParallel = 1
        }

        public enum CameraMode
        {
            CmFreeChase = 2,
            CmFree = 5
        }

        public unsafe partial class Camera : global::UtinniCore.Utinni.Object, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 520)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint unk01;

                [FieldOffset(8)]
                internal uint unk02;

                [FieldOffset(12)]
                internal uint unk03;

                [FieldOffset(16)]
                internal global::System.IntPtr objectTemplate;

                [FieldOffset(20)]
                internal uint unk04;

                [FieldOffset(24)]
                internal global::System.IntPtr name;

                [FieldOffset(32)]
                internal long networkId;

                [FieldOffset(40)]
                internal global::System.IntPtr appearance;

                [FieldOffset(44)]
                internal global::System.IntPtr controller;

                [FieldOffset(48)]
                internal uint unk07;

                [FieldOffset(52)]
                internal global::System.IntPtr parentObject;

                [FieldOffset(56)]
                internal uint unk08;

                [FieldOffset(60)]
                internal global::System.IntPtr dpvsObjects;

                [FieldOffset(64)]
                internal int rotations;

                [FieldOffset(68)]
                internal global::UtinniCore.Swg.Math.Vector.__Internal scale;

                [FieldOffset(80)]
                internal global::UtinniCore.Swg.Math.Transform.__Internal objectToParent;

                [FieldOffset(128)]
                internal global::System.IntPtr objectToWorld;

                [FieldOffset(132)]
                internal uint unk09;

                [FieldOffset(136)]
                internal global::System.IntPtr container;

                [FieldOffset(140)]
                internal global::System.IntPtr CollisionProperty;

                [FieldOffset(144)]
                internal global::System.IntPtr SpatialSubdivisionHandle;

                [FieldOffset(148)]
                internal byte unk10;

                [FieldOffset(149)]
                internal byte unk11;

                [FieldOffset(150)]
                internal byte unk12;

                [FieldOffset(151)]
                internal byte unk13;

                [FieldOffset(152)]
                internal uint unk14;

                [FieldOffset(156)]
                internal uint containedBy;

                [FieldOffset(160)]
                internal global::UtinniCore.Swg.Math.Matrix4x4.__Internal projectionMatrix;

                [FieldOffset(224)]
                internal int viewportX;

                [FieldOffset(228)]
                internal int viewportY;

                [FieldOffset(232)]
                internal int viewportWidth;

                [FieldOffset(236)]
                internal int viewportHeight;

                [FieldOffset(240)]
                internal float oneOverViewportWidth;

                [FieldOffset(244)]
                internal float oneOverViewportHeight;

                [FieldOffset(248)]
                internal float nearPlane;

                [FieldOffset(252)]
                internal float farPlane;

                [FieldOffset(256)]
                internal float horizontalFieldOfView;

                [FieldOffset(260)]
                internal float verticalFieldOfView;

                [FieldOffset(264)]
                internal float tanOfHalfHorizontalFov;

                [FieldOffset(268)]
                internal float tanOfHalfVerticalFov;

                [FieldOffset(272)]
                internal fixed byte frustumVertex[96];

                [FieldOffset(368)]
                internal global::UtinniCore.Swg.Math.Volume.__Internal frustumVolume;

                [FieldOffset(376)]
                internal fixed byte frustumVertex_w[96];

                [FieldOffset(472)]
                internal global::UtinniCore.Swg.Math.Volume.__Internal frustumVolume_w;

                [FieldOffset(480)]
                internal global::UtinniCore.Utinni.CameraProjectionMode projectionMode;

                [FieldOffset(484)]
                internal float left;

                [FieldOffset(488)]
                internal float top;

                [FieldOffset(492)]
                internal float right;

                [FieldOffset(496)]
                internal float bottom;

                [FieldOffset(500)]
                internal byte isUnderWater;

                [FieldOffset(504)]
                internal uint unk011;

                [FieldOffset(508)]
                internal int numberOfObjectsAdded;

                [FieldOffset(512)]
                internal global::System.IntPtr unk021;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Camera@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Camera@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getViewport@Camera@utinni@@QAEXAAH000@Z")]
                internal static extern void GetViewport(global::System.IntPtr __instance, int* viewPortX0, int* viewPortY0, int* viewPortX1, int* viewPortY1);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getViewport@Camera@utinni@@QAEXAAM000@Z")]
                internal static extern void GetViewport_1(global::System.IntPtr __instance, float* viewPortX0, float* viewPortY0, float* viewPortX1, float* viewPortY1);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setViewport@Camera@utinni@@QAEXHHHH@Z")]
                internal static extern void SetViewport(global::System.IntPtr __instance, int x0, int y0, int width, int height);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setNearPlane@Camera@utinni@@QAEXM@Z")]
                internal static extern void SetNearPlane(global::System.IntPtr __instance, float nearPlane);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setFarPlane@Camera@utinni@@QAEXM@Z")]
                internal static extern void SetFarPlane(global::System.IntPtr __instance, float farPlane);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setHorizontalFieldOfView@Camera@utinni@@QAEXM@Z")]
                internal static extern void SetHorizontalFieldOfView(global::System.IntPtr __instance, float fieldOfView);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?reverseProjectInViewportSpace@Camera@utinni@@QAE?AUVector@math@swg@@HH@Z")]
                internal static extern void ReverseProjectInViewportSpace(global::System.IntPtr __instance, global::System.IntPtr @return, int x, int y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?reverseProjectInViewportSpace@Camera@utinni@@QAE?AUVector@math@swg@@MMM@Z")]
                internal static extern void ReverseProjectInViewportSpace(global::System.IntPtr __instance, global::System.IntPtr @return, float viewPortX, float viewPortY, float cameraZ);
            }

            internal static new global::UtinniCore.Utinni.Camera __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Camera(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Camera __CreateInstance(global::UtinniCore.Utinni.Camera.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Camera(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Camera.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Camera.__Internal));
                global::UtinniCore.Utinni.Camera.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Camera(global::UtinniCore.Utinni.Camera.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Camera(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public Camera(global::UtinniCore.Utinni.Camera _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Camera.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor(__Instance, __arg0);
            }

            public Camera()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Camera.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public void GetViewport(ref int viewPortX0, ref int viewPortY0, ref int viewPortX1, ref int viewPortY1)
            {
                fixed (int* __viewPortX00 = &viewPortX0)
                {
                    var __arg0 = __viewPortX00;
                    fixed (int* __viewPortY01 = &viewPortY0)
                    {
                        var __arg1 = __viewPortY01;
                        fixed (int* __viewPortX12 = &viewPortX1)
                        {
                            var __arg2 = __viewPortX12;
                            fixed (int* __viewPortY13 = &viewPortY1)
                            {
                                var __arg3 = __viewPortY13;
                                __Internal.GetViewport(__Instance, __arg0, __arg1, __arg2, __arg3);
                            }
                        }
                    }
                }
            }

            public void GetViewport(ref float viewPortX0, ref float viewPortY0, ref float viewPortX1, ref float viewPortY1)
            {
                fixed (float* __viewPortX00 = &viewPortX0)
                {
                    var __arg0 = __viewPortX00;
                    fixed (float* __viewPortY01 = &viewPortY0)
                    {
                        var __arg1 = __viewPortY01;
                        fixed (float* __viewPortX12 = &viewPortX1)
                        {
                            var __arg2 = __viewPortX12;
                            fixed (float* __viewPortY13 = &viewPortY1)
                            {
                                var __arg3 = __viewPortY13;
                                __Internal.GetViewport_1(__Instance, __arg0, __arg1, __arg2, __arg3);
                            }
                        }
                    }
                }
            }

            public void SetViewport(int x0, int y0, int width, int height)
            {
                __Internal.SetViewport(__Instance, x0, y0, width, height);
            }

            public void SetNearPlane(float nearPlane)
            {
                __Internal.SetNearPlane(__Instance, nearPlane);
            }

            public void SetFarPlane(float farPlane)
            {
                __Internal.SetFarPlane(__Instance, farPlane);
            }

            public void SetHorizontalFieldOfView(float fieldOfView)
            {
                __Internal.SetHorizontalFieldOfView(__Instance, fieldOfView);
            }

            public global::UtinniCore.Swg.Math.Vector ReverseProjectInViewportSpace(int x, int y)
            {
                var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                __Internal.ReverseProjectInViewportSpace(__Instance, new IntPtr(&__ret), x, y);
                return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
            }

            public global::UtinniCore.Swg.Math.Vector ReverseProjectInViewportSpace(float viewPortX, float viewPortY, float cameraZ)
            {
                var __ret = new global::UtinniCore.Swg.Math.Vector.__Internal();
                __Internal.ReverseProjectInViewportSpace(__Instance, new IntPtr(&__ret), viewPortX, viewPortY, cameraZ);
                return global::UtinniCore.Swg.Math.Vector.__CreateInstance(__ret);
            }

            public global::UtinniCore.Swg.Math.Matrix4x4 ProjectionMatrix
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Matrix4x4.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->projectionMatrix));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->projectionMatrix = *(global::UtinniCore.Swg.Math.Matrix4x4.__Internal*) value.__Instance;
                }
            }

            public int ViewportX
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->viewportX;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->viewportX = value;
                }
            }

            public int ViewportY
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->viewportY;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->viewportY = value;
                }
            }

            public int ViewportWidth
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->viewportWidth;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->viewportWidth = value;
                }
            }

            public int ViewportHeight
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->viewportHeight;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->viewportHeight = value;
                }
            }

            public float OneOverViewportWidth
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->oneOverViewportWidth;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->oneOverViewportWidth = value;
                }
            }

            public float OneOverViewportHeight
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->oneOverViewportHeight;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->oneOverViewportHeight = value;
                }
            }

            public float NearPlane
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->nearPlane;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->nearPlane = value;
                }
            }

            public float FarPlane
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->farPlane;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->farPlane = value;
                }
            }

            public float HorizontalFieldOfView
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->horizontalFieldOfView;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->horizontalFieldOfView = value;
                }
            }

            public float VerticalFieldOfView
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->verticalFieldOfView;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->verticalFieldOfView = value;
                }
            }

            public float TanOfHalfHorizontalFov
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->tanOfHalfHorizontalFov;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->tanOfHalfHorizontalFov = value;
                }
            }

            public float TanOfHalfVerticalFov
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->tanOfHalfVerticalFov;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->tanOfHalfVerticalFov = value;
                }
            }

            public global::UtinniCore.Swg.Math.Vector[] FrustumVertex
            {
                get
                {
                    global::UtinniCore.Swg.Math.Vector[] __value = null;
                    if (((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVertex != null)
                    {
                        __value = new global::UtinniCore.Swg.Math.Vector[8];
                        for (int i = 0; i < 8; i++)
                            __value[i] = global::UtinniCore.Swg.Math.Vector.__CreateInstance(*((global::UtinniCore.Swg.Math.Vector.__Internal*)&(((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVertex[i * sizeof(global::UtinniCore.Swg.Math.Vector.__Internal)])));
                    }
                    return __value;
                }

                set
                {
                    if (value != null)
                    {
                        if (value.Length != 8)
                            throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                        for (int i = 0; i < 8; i++)
                            *(global::UtinniCore.Swg.Math.Vector.__Internal*) &((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->frustumVertex[i * sizeof(global::UtinniCore.Swg.Math.Vector.__Internal)] = *(global::UtinniCore.Swg.Math.Vector.__Internal*)value[i].__Instance;
                    }
                }
            }

            public global::UtinniCore.Swg.Math.Volume FrustumVolume
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Volume.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVolume));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->frustumVolume = *(global::UtinniCore.Swg.Math.Volume.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Vector[] FrustumVertexW
            {
                get
                {
                    global::UtinniCore.Swg.Math.Vector[] __value = null;
                    if (((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVertex_w != null)
                    {
                        __value = new global::UtinniCore.Swg.Math.Vector[8];
                        for (int i = 0; i < 8; i++)
                            __value[i] = global::UtinniCore.Swg.Math.Vector.__CreateInstance(*((global::UtinniCore.Swg.Math.Vector.__Internal*)&(((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVertex_w[i * sizeof(global::UtinniCore.Swg.Math.Vector.__Internal)])));
                    }
                    return __value;
                }

                set
                {
                    if (value != null)
                    {
                        if (value.Length != 8)
                            throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                        for (int i = 0; i < 8; i++)
                            *(global::UtinniCore.Swg.Math.Vector.__Internal*) &((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->frustumVertex_w[i * sizeof(global::UtinniCore.Swg.Math.Vector.__Internal)] = *(global::UtinniCore.Swg.Math.Vector.__Internal*)value[i].__Instance;
                    }
                }
            }

            public global::UtinniCore.Swg.Math.Volume FrustumVolumeW
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Volume.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->frustumVolume_w));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->frustumVolume_w = *(global::UtinniCore.Swg.Math.Volume.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Utinni.CameraProjectionMode ProjectionMode
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->projectionMode;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->projectionMode = value;
                }
            }

            public float Left
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->left;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->left = value;
                }
            }

            public float Top
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->top;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->top = value;
                }
            }

            public float Right
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->right;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->right = value;
                }
            }

            public float Bottom
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->bottom;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->bottom = value;
                }
            }

            public bool IsUnderWater
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->isUnderWater != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->isUnderWater = (byte) (value ? 1 : 0);
                }
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->unk011;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->unk011 = value;
                }
            }

            public int NumberOfObjectsAdded
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->numberOfObjectsAdded;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->numberOfObjectsAdded = value;
                }
            }

            public uint* Unk02
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Camera.__Internal*) __Instance)->unk021;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Camera.__Internal*)__Instance)->unk021 = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class RenderWorldCamera : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0RenderWorldCamera@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?addExcludedObject@RenderWorldCamera@utinni@@SAXPAVObject@2@@Z")]
                internal static extern void AddExcludedObject(global::System.IntPtr obj);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?clearExcludedObjects@RenderWorldCamera@utinni@@SAXXZ")]
                internal static extern void ClearExcludedObjects();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.RenderWorldCamera> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.RenderWorldCamera>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.RenderWorldCamera __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.RenderWorldCamera(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.RenderWorldCamera __CreateInstance(global::UtinniCore.Utinni.RenderWorldCamera.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.RenderWorldCamera(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.RenderWorldCamera.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.RenderWorldCamera.__Internal));
                *(global::UtinniCore.Utinni.RenderWorldCamera.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private RenderWorldCamera(global::UtinniCore.Utinni.RenderWorldCamera.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected RenderWorldCamera(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public RenderWorldCamera()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.RenderWorldCamera.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public RenderWorldCamera(global::UtinniCore.Utinni.RenderWorldCamera _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.RenderWorldCamera.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.RenderWorldCamera.__Internal*) __Instance) = *((global::UtinniCore.Utinni.RenderWorldCamera.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.RenderWorldCamera __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void AddExcludedObject(global::UtinniCore.Utinni.Object obj)
            {
                var __arg0 = ReferenceEquals(obj, null) ? global::System.IntPtr.Zero : obj.__Instance;
                __Internal.AddExcludedObject(__arg0);
            }

            public static void ClearExcludedObjects()
            {
                __Internal.ClearExcludedObjects();
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class GroundScene : global::UtinniCore.Utinni.NetworkScene, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 232)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::System.IntPtr name;

                [FieldOffset(8)]
                internal global::System.IntPtr ioWin;

                [FieldOffset(12)]
                internal uint unk01;

                [FieldOffset(16)]
                internal uint unk02;

                [FieldOffset(20)]
                internal uint unk03;

                [FieldOffset(24)]
                internal uint unk04;

                [FieldOffset(28)]
                internal global::System.IntPtr playerObject;

                [FieldOffset(32)]
                internal uint unk011;

                [FieldOffset(36)]
                internal uint unk021;

                [FieldOffset(40)]
                internal uint unk031;

                [FieldOffset(44)]
                internal uint unk041;

                [FieldOffset(48)]
                internal uint unk05;

                [FieldOffset(52)]
                internal uint unk06;

                [FieldOffset(56)]
                internal uint unk07;

                [FieldOffset(60)]
                internal uint unk08;

                [FieldOffset(64)]
                internal uint unk09;

                [FieldOffset(68)]
                internal uint unk10;

                [FieldOffset(72)]
                internal uint unk11;

                [FieldOffset(76)]
                internal global::System.IntPtr inputMap;

                [FieldOffset(80)]
                internal global::System.IntPtr debugPortalCameraInputMap;

                [FieldOffset(84)]
                internal global::System.IntPtr structurePlacementCameraInputMap;

                [FieldOffset(88)]
                internal global::System.IntPtr freeCameraInputMap;

                [FieldOffset(92)]
                internal global::System.IntPtr mouseCursor;

                [FieldOffset(96)]
                internal global::System.IntPtr lastYawPitch;

                [FieldOffset(100)]
                internal global::System.IntPtr cockpitCamera;

                [FieldOffset(104)]
                internal global::System.IntPtr shipTurretCamera;

                [FieldOffset(108)]
                internal global::System.IntPtr freeChaseCamera;

                [FieldOffset(112)]
                internal global::System.IntPtr freeCamera;

                [FieldOffset(116)]
                internal global::System.IntPtr debugPortalCamera;

                [FieldOffset(120)]
                internal global::System.IntPtr structurePlacementCamera;

                [FieldOffset(124)]
                internal global::System.IntPtr flyByCamera;

                [FieldOffset(128)]
                internal global::System.IntPtr cameras;

                [FieldOffset(156)]
                internal int currentView;

                [FieldOffset(160)]
                internal byte disableWorldSnapshot;

                [FieldOffset(161)]
                internal byte unk012;

                [FieldOffset(162)]
                internal byte unk022;

                [FieldOffset(163)]
                internal byte isLoading;

                [FieldOffset(164)]
                internal byte unk032;

                [FieldOffset(165)]
                internal byte isReady;

                [FieldOffset(166)]
                internal byte unk042;

                [FieldOffset(168)]
                internal uint unk051;

                [FieldOffset(172)]
                internal uint unk061;

                [FieldOffset(176)]
                internal uint unk071;

                [FieldOffset(180)]
                internal uint unk081;

                [FieldOffset(184)]
                internal uint unk091;

                [FieldOffset(188)]
                internal global::System.IntPtr overheadMap;

                [FieldOffset(192)]
                internal uint unk101;

                [FieldOffset(196)]
                internal uint unk111;

                [FieldOffset(200)]
                internal byte currentMode;

                [FieldOffset(204)]
                internal uint unk12;

                [FieldOffset(208)]
                internal uint unk13;

                [FieldOffset(212)]
                internal uint unk14;

                [FieldOffset(216)]
                internal uint unk15;

                [FieldOffset(220)]
                internal byte isTutorial;

                [FieldOffset(224)]
                internal uint unk16;

                [FieldOffset(228)]
                internal uint unk17;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0GroundScene@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?get@GroundScene@utinni@@SAPAV12@XZ")]
                internal static extern global::System.IntPtr Get();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?addPreDrawLoopCallback@GroundScene@utinni@@SAXP6AXPAV12@@Z@Z")]
                internal static extern void AddPreDrawLoopCallback(global::System.IntPtr func);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?addPostDrawLoopCallback@GroundScene@utinni@@SAXP6AXPAV12@@Z@Z")]
                internal static extern void AddPostDrawLoopCallback(global::System.IntPtr func);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?addUpdateLoopCallback@GroundScene@utinni@@SAXP6AXPAV12@M@Z@Z")]
                internal static extern void AddUpdateLoopCallback(global::System.IntPtr func);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detour@GroundScene@utinni@@SAXXZ")]
                internal static extern void Detour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?removeDetour@GroundScene@utinni@@SAXXZ")]
                internal static extern void RemoveDetour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?reloadTerrain@GroundScene@utinni@@QAEXXZ")]
                internal static extern void ReloadTerrain(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getName@GroundScene@utinni@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern void GetName(global::System.IntPtr __instance, global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getCurrentCamera@GroundScene@utinni@@QAEPAVCamera@2@XZ")]
                internal static extern global::System.IntPtr GetCurrentCamera(global::System.IntPtr __instance);
            }

            internal static new global::UtinniCore.Utinni.GroundScene __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.GroundScene(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.GroundScene __CreateInstance(global::UtinniCore.Utinni.GroundScene.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.GroundScene(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.GroundScene.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.GroundScene.__Internal));
                *(global::UtinniCore.Utinni.GroundScene.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private GroundScene(global::UtinniCore.Utinni.GroundScene.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected GroundScene(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public GroundScene()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.GroundScene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public GroundScene(global::UtinniCore.Utinni.GroundScene _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.GroundScene.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance) = *((global::UtinniCore.Utinni.GroundScene.__Internal*) _0.__Instance);
            }

            public void ReloadTerrain()
            {
                __Internal.ReloadTerrain(__Instance);
            }

            public static global::UtinniCore.Utinni.GroundScene Get()
            {
                var __ret = __Internal.Get();
                global::UtinniCore.Utinni.GroundScene __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.GroundScene.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.GroundScene) global::UtinniCore.Utinni.GroundScene.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.GroundScene.__CreateInstance(__ret);
                return __result0;
            }

            public static void AddPreDrawLoopCallback(global::UtinniCore.Delegates.Action_IntPtr func)
            {
                var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
                __Internal.AddPreDrawLoopCallback(__arg0);
            }

            public static void AddPostDrawLoopCallback(global::UtinniCore.Delegates.Action_IntPtr func)
            {
                var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
                __Internal.AddPostDrawLoopCallback(__arg0);
            }

            public static void AddUpdateLoopCallback(global::UtinniCore.Delegates.Action_IntPtr_float func)
            {
                var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
                __Internal.AddUpdateLoopCallback(__arg0);
            }

            public static void Detour()
            {
                __Internal.Detour();
            }

            public static void RemoveDetour()
            {
                __Internal.RemoveDetour();
            }

            public uint* InputMap
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->inputMap;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->inputMap = (global::System.IntPtr) value;
                }
            }

            public uint* DebugPortalCameraInputMap
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->debugPortalCameraInputMap;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->debugPortalCameraInputMap = (global::System.IntPtr) value;
                }
            }

            public uint* StructurePlacementCameraInputMap
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->structurePlacementCameraInputMap;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->structurePlacementCameraInputMap = (global::System.IntPtr) value;
                }
            }

            public uint* FreeCameraInputMap
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->freeCameraInputMap;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->freeCameraInputMap = (global::System.IntPtr) value;
                }
            }

            public uint* MouseCursor
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->mouseCursor;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->mouseCursor = (global::System.IntPtr) value;
                }
            }

            public uint* LastYawPitch
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->lastYawPitch;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->lastYawPitch = (global::System.IntPtr) value;
                }
            }

            public uint* CockpitCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->cockpitCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->cockpitCamera = (global::System.IntPtr) value;
                }
            }

            public uint* ShipTurretCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->shipTurretCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->shipTurretCamera = (global::System.IntPtr) value;
                }
            }

            public uint* FreeChaseCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->freeChaseCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->freeChaseCamera = (global::System.IntPtr) value;
                }
            }

            public uint* FreeCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->freeCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->freeCamera = (global::System.IntPtr) value;
                }
            }

            public uint* DebugPortalCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->debugPortalCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->debugPortalCamera = (global::System.IntPtr) value;
                }
            }

            public uint* StructurePlacementCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->structurePlacementCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->structurePlacementCamera = (global::System.IntPtr) value;
                }
            }

            public uint* FlyByCamera
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->flyByCamera;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->flyByCamera = (global::System.IntPtr) value;
                }
            }

            private uint*[] __cameras;

            private bool __camerasInitialised;
            public uint*[] Cameras
            {
                get
                {
                    if (!__camerasInitialised)
                    {
                        __cameras = null;
                        __camerasInitialised = true;
                    }
                    return __cameras;
                }

                set
                {
                    __cameras = value;
                    if (!__camerasInitialised)
                    {
                        __camerasInitialised = true;
                    }
                }
            }

            public int CurrentView
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->currentView;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->currentView = value;
                }
            }

            public bool DisableWorldSnapshot
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->disableWorldSnapshot != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->disableWorldSnapshot = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk012 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk012 = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk022 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk022 = (byte) (value ? 1 : 0);
                }
            }

            public bool IsLoading
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->isLoading != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->isLoading = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk03
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk032 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk032 = (byte) (value ? 1 : 0);
                }
            }

            public bool IsReady
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->isReady != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->isReady = (byte) (value ? 1 : 0);
                }
            }

            public bool Unk04
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk042 != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk042 = (byte) (value ? 1 : 0);
                }
            }

            public uint Unk05
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk051;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk051 = value;
                }
            }

            public uint Unk06
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk061;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk061 = value;
                }
            }

            public uint Unk07
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk071;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk071 = value;
                }
            }

            public uint Unk08
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk081;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk081 = value;
                }
            }

            public uint Unk09
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk091;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk091 = value;
                }
            }

            public uint* OverheadMap
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->overheadMap;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->overheadMap = (global::System.IntPtr) value;
                }
            }

            public uint Unk10
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk101;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk101 = value;
                }
            }

            public uint Unk11
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk111;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk111 = value;
                }
            }

            public bool CurrentMode
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->currentMode != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->currentMode = (byte) (value ? 1 : 0);
                }
            }

            public uint Unk12
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk12;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk12 = value;
                }
            }

            public uint Unk13
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk13;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk13 = value;
                }
            }

            public uint Unk14
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk14;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk14 = value;
                }
            }

            public uint Unk15
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk15;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk15 = value;
                }
            }

            public bool IsTutorial
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->isTutorial != 0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->isTutorial = (byte) (value ? 1 : 0);
                }
            }

            public uint Unk16
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk16;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk16 = value;
                }
            }

            public uint Unk17
            {
                get
                {
                    return ((global::UtinniCore.Utinni.GroundScene.__Internal*) __Instance)->unk17;
                }

                set
                {
                    ((global::UtinniCore.Utinni.GroundScene.__Internal*)__Instance)->unk17 = value;
                }
            }

            public string Name
            {
                get
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetName(__Instance, new IntPtr(&__ret));
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            public global::UtinniCore.Utinni.Camera CurrentCamera
            {
                get
                {
                    var __ret = __Internal.GetCurrentCamera(__Instance);
                    global::UtinniCore.Utinni.Camera __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Camera.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::UtinniCore.Utinni.Camera) global::UtinniCore.Utinni.Camera.NativeToManagedMap[__ret];
                    else __result0 = global::UtinniCore.Utinni.Camera.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class Terrain : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Terrain@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?get@Terrain@utinni@@SAPAV12@XZ")]
                internal static extern global::System.IntPtr Get();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getTimeOfDay@Terrain@utinni@@QAEMXZ")]
                internal static extern float GetTimeOfDay(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setTimeOfDay@Terrain@utinni@@QAEXM@Z")]
                internal static extern void SetTimeOfDay(global::System.IntPtr __instance, float time);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getWeatherIndex@Terrain@utinni@@QAEHXZ")]
                internal static extern int GetWeatherIndex(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setWeatherIndex@Terrain@utinni@@QAEXH@Z")]
                internal static extern void SetWeatherIndex(global::System.IntPtr __instance, int weatherIndex);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getFilename@Terrain@utinni@@QAEPBDXZ")]
                internal static extern global::System.IntPtr GetFilename(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Terrain> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Terrain>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Terrain __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Terrain(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Terrain __CreateInstance(global::UtinniCore.Utinni.Terrain.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Terrain(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Terrain.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Terrain.__Internal));
                *(global::UtinniCore.Utinni.Terrain.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Terrain(global::UtinniCore.Utinni.Terrain.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Terrain(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Terrain()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Terrain.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Terrain(global::UtinniCore.Utinni.Terrain _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Terrain.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Terrain.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Terrain.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Terrain __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::UtinniCore.Utinni.Terrain Get()
            {
                var __ret = __Internal.Get();
                global::UtinniCore.Utinni.Terrain __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.Terrain.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.Terrain) global::UtinniCore.Utinni.Terrain.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.Terrain.__CreateInstance(__ret);
                return __result0;
            }

            public float TimeOfDay
            {
                get
                {
                    var __ret = __Internal.GetTimeOfDay(__Instance);
                    return __ret;
                }

                set
                {
                    __Internal.SetTimeOfDay(__Instance, value);
                }
            }

            public int WeatherIndex
            {
                get
                {
                    var __ret = __Internal.GetWeatherIndex(__Instance);
                    return __ret;
                }

                set
                {
                    __Internal.SetWeatherIndex(__Instance, value);
                }
            }

            public string Filename
            {
                get
                {
                    var __ret = __Internal.GetFilename(__Instance);
                    if (__ret == global::System.IntPtr.Zero)
                        return default(string);
                    var __retPtr = (byte*) __ret;
                    int __length = 0;
                    while (*(__retPtr++) != 0) __length += sizeof(byte);
                    return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class WorldSnapshotReaderWriter : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr nodeList;

                [FieldOffset(4)]
                internal global::System.IntPtr objectTemplateNameList;

                [FieldOffset(8)]
                internal global::System.IntPtr objectTemplateCrcMap;

                [FieldOffset(12)]
                internal global::System.IntPtr networkIdMap;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0WorldSnapshotReaderWriter@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?get@WorldSnapshotReaderWriter@utinni@@SAPAV12@XZ")]
                internal static extern global::System.IntPtr Get();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clear@WorldSnapshotReaderWriter@utinni@@QAEXXZ")]
                internal static extern void Clear(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?clearPreloadList@WorldSnapshotReaderWriter@utinni@@SAXKKK@Z")]
                internal static extern void ClearPreloadList(uint unk1, uint unk2, uint unk3);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?saveFile@WorldSnapshotReaderWriter@utinni@@QAEXXZ")]
                internal static extern void SaveFile(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getObjectTemplateName@WorldSnapshotReaderWriter@utinni@@QAEPBDH@Z")]
                internal static extern global::System.IntPtr GetObjectTemplateName(global::System.IntPtr __instance, int objectTemplateNameIndex);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getNodeByNetworkId@WorldSnapshotReaderWriter@utinni@@QAEPAVNode@12@_J@Z")]
                internal static extern global::System.IntPtr GetNodeByNetworkId(global::System.IntPtr __instance, long networkId);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getNodeByIndex@WorldSnapshotReaderWriter@utinni@@QAEPAVNode@12@H@Z")]
                internal static extern global::System.IntPtr GetNodeByIndex(global::System.IntPtr __instance, int nodeId);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addNode@WorldSnapshotReaderWriter@utinni@@QAEPAVNode@12@HHPBDHABUTransform@math@swg@@MI@Z")]
                internal static extern global::System.IntPtr AddNode(global::System.IntPtr __instance, int nodeId, int parentNodeId, [MarshalAs(UnmanagedType.LPUTF8Str)] string objectFilename, int cellId, global::System.IntPtr transform, float radius, uint pobCrc);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getNodeCount@WorldSnapshotReaderWriter@utinni@@QAEHXZ")]
                internal static extern int GetNodeCount(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getNodeCountTotal@WorldSnapshotReaderWriter@utinni@@QAEHXZ")]
                internal static extern int GetNodeCountTotal(global::System.IntPtr __instance);
            }

            public unsafe partial class Node : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 96)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal byte isDeleted;

                    [FieldOffset(4)]
                    internal int id;

                    [FieldOffset(8)]
                    internal int parentId;

                    [FieldOffset(12)]
                    internal int objectTemplateNameIndex;

                    [FieldOffset(16)]
                    internal int cellIndex;

                    [FieldOffset(20)]
                    internal global::UtinniCore.Swg.Math.Transform.__Internal transform;

                    [FieldOffset(68)]
                    internal float radius;

                    [FieldOffset(72)]
                    internal int pobCRC;

                    [FieldOffset(76)]
                    internal global::System.IntPtr parentNode;

                    [FieldOffset(80)]
                    internal global::System.IntPtr children;

                    [FieldOffset(84)]
                    internal global::System.IntPtr pSpatialSubdivisionHandle;

                    [FieldOffset(88)]
                    internal float distanceSquaredTo;

                    [FieldOffset(92)]
                    internal byte isInWorld;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Node@WorldSnapshotReaderWriter@utinni@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Node@WorldSnapshotReaderWriter@utinni@@QAE@ABV012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?removeNode@Node@WorldSnapshotReaderWriter@utinni@@QAEXXZ")]
                    internal static extern void RemoveNode(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?removeNodeFull@Node@WorldSnapshotReaderWriter@utinni@@QAEXXZ")]
                    internal static extern void RemoveNodeFull(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNodeNetworkId@Node@WorldSnapshotReaderWriter@utinni@@QAE_JXZ")]
                    internal static extern long GetNodeNetworkId(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNodeSpatialSubdivisionHandle@Node@WorldSnapshotReaderWriter@utinni@@QAEKXZ")]
                    internal static extern uint GetNodeSpatialSubdivisionHandle(global::System.IntPtr __instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setNodeSpatialSubdivisionHandle@Node@WorldSnapshotReaderWriter@utinni@@QAEXK@Z")]
                    internal static extern void SetNodeSpatialSubdivisionHandle(global::System.IntPtr __instance, uint handle);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node>();

                protected bool __ownsNativeInstance;

                internal static global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node(native.ToPointer(), skipVTables);
                }

                internal static global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __CreateInstance(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal native, bool skipVTables = false)
                {
                    return new global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node(native, skipVTables);
                }

                private static void* __CopyValue(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal));
                    *(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Node(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Node(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Node()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor(__Instance);
                }

                public Node(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance) = *((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public void RemoveNode()
                {
                    __Internal.RemoveNode(__Instance);
                }

                public void RemoveNodeFull()
                {
                    __Internal.RemoveNodeFull(__Instance);
                }

                public bool IsDeleted
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->isDeleted != 0;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->isDeleted = (byte) (value ? 1 : 0);
                    }
                }

                public int Id
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->id;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->id = value;
                    }
                }

                public int ParentId
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->parentId;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->parentId = value;
                    }
                }

                public int ObjectTemplateNameIndex
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->objectTemplateNameIndex;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->objectTemplateNameIndex = value;
                    }
                }

                public int CellIndex
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->cellIndex;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->cellIndex = value;
                    }
                }

                public global::UtinniCore.Swg.Math.Transform Transform
                {
                    get
                    {
                        return global::UtinniCore.Swg.Math.Transform.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->transform));
                    }

                    set
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->transform = *(global::UtinniCore.Swg.Math.Transform.__Internal*) value.__Instance;
                    }
                }

                public float Radius
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->radius;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->radius = value;
                    }
                }

                public int PobCRC
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->pobCRC;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->pobCRC = value;
                    }
                }

                public global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node ParentNode
                {
                    get
                    {
                        global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __result0;
                        if (((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->parentNode == IntPtr.Zero) __result0 = null;
                        else if (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->parentNode))
                            __result0 = (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node) global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap[((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->parentNode];
                        else __result0 = global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__CreateInstance(((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->parentNode);
                        return __result0;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->parentNode = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint* PSpatialSubdivisionHandle
                {
                    get
                    {
                        return (uint*) ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->pSpatialSubdivisionHandle;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->pSpatialSubdivisionHandle = (global::System.IntPtr) value;
                    }
                }

                public float DistanceSquaredTo
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->distanceSquaredTo;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->distanceSquaredTo = value;
                    }
                }

                public bool IsInWorld
                {
                    get
                    {
                        return ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*) __Instance)->isInWorld != 0;
                    }

                    set
                    {
                        ((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__Internal*)__Instance)->isInWorld = (byte) (value ? 1 : 0);
                    }
                }

                public long NodeNetworkId
                {
                    get
                    {
                        var __ret = __Internal.GetNodeNetworkId(__Instance);
                        return __ret;
                    }
                }

                public uint NodeSpatialSubdivisionHandle
                {
                    get
                    {
                        var __ret = __Internal.GetNodeSpatialSubdivisionHandle(__Instance);
                        return __ret;
                    }

                    set
                    {
                        __Internal.SetNodeSpatialSubdivisionHandle(__Instance, value);
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshotReaderWriter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshotReaderWriter>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.WorldSnapshotReaderWriter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.WorldSnapshotReaderWriter(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.WorldSnapshotReaderWriter __CreateInstance(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.WorldSnapshotReaderWriter(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal));
                *(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private WorldSnapshotReaderWriter(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected WorldSnapshotReaderWriter(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public WorldSnapshotReaderWriter()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public WorldSnapshotReaderWriter(global::UtinniCore.Utinni.WorldSnapshotReaderWriter _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal*) __Instance) = *((global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.WorldSnapshotReaderWriter __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void Clear()
            {
                __Internal.Clear(__Instance);
            }

            public void SaveFile()
            {
                __Internal.SaveFile(__Instance);
            }

            public string GetObjectTemplateName(int objectTemplateNameIndex)
            {
                var __ret = __Internal.GetObjectTemplateName(__Instance, objectTemplateNameIndex);
                if (__ret == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) __ret;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
            }

            public global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node GetNodeByNetworkId(long networkId)
            {
                var __ret = __Internal.GetNodeByNetworkId(__Instance, networkId);
                global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node) global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__CreateInstance(__ret);
                return __result0;
            }

            public global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node GetNodeByIndex(int nodeId)
            {
                var __ret = __Internal.GetNodeByIndex(__Instance, nodeId);
                global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node) global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__CreateInstance(__ret);
                return __result0;
            }

            public global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node AddNode(int nodeId, int parentNodeId, string objectFilename, int cellId, global::UtinniCore.Swg.Math.Transform transform, float radius, uint pobCrc)
            {
                if (ReferenceEquals(transform, null))
                    throw new global::System.ArgumentNullException("transform", "Cannot be null because it is a C++ reference (&).");
                var __arg4 = transform.__Instance;
                var __ret = __Internal.AddNode(__Instance, nodeId, parentNodeId, objectFilename, cellId, __arg4, radius, pobCrc);
                global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node) global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node.__CreateInstance(__ret);
                return __result0;
            }

            public static global::UtinniCore.Utinni.WorldSnapshotReaderWriter Get()
            {
                var __ret = __Internal.Get();
                global::UtinniCore.Utinni.WorldSnapshotReaderWriter __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.WorldSnapshotReaderWriter.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.WorldSnapshotReaderWriter) global::UtinniCore.Utinni.WorldSnapshotReaderWriter.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.WorldSnapshotReaderWriter.__CreateInstance(__ret);
                return __result0;
            }

            public static void ClearPreloadList(uint unk1, uint unk2, uint unk3)
            {
                __Internal.ClearPreloadList(unk1, unk2, unk3);
            }

            public int NodeCount
            {
                get
                {
                    var __ret = __Internal.GetNodeCount(__Instance);
                    return __ret;
                }
            }

            public int NodeCountTotal
            {
                get
                {
                    var __ret = __Internal.GetNodeCountTotal(__Instance);
                    return __ret;
                }
            }
        }

        public unsafe partial class WorldSnapshot : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0WorldSnapshot@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?load@WorldSnapshot@utinni@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void Load(global::System.IntPtr name);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?unload@WorldSnapshot@utinni@@SAXXZ")]
                internal static extern void Unload();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?reload@WorldSnapshot@utinni@@SAXXZ")]
                internal static extern void Reload();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detailLevelChanged@WorldSnapshot@utinni@@SAXXZ")]
                internal static extern void DetailLevelChanged();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?createNewNode@WorldSnapshot@utinni@@SAXPBDAAUTransform@math@swg@@@Z")]
                internal static extern void CreateNewNode([MarshalAs(UnmanagedType.LPUTF8Str)] string objectFilename, global::System.IntPtr transform);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?removeNode@WorldSnapshot@utinni@@SAXPAVNode@WorldSnapshotReaderWriter@2@@Z")]
                internal static extern void RemoveNode(global::System.IntPtr pNode);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getPreloadSnapshot@WorldSnapshot@utinni@@SA_NXZ")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool GetPreloadSnapshot();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setPreloadSnapshot@WorldSnapshot@utinni@@SAX_N@Z")]
                internal static extern void SetPreloadSnapshot(bool preloadSnapshot);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshot> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.WorldSnapshot>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.WorldSnapshot __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.WorldSnapshot(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.WorldSnapshot __CreateInstance(global::UtinniCore.Utinni.WorldSnapshot.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.WorldSnapshot(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.WorldSnapshot.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshot.__Internal));
                *(global::UtinniCore.Utinni.WorldSnapshot.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private WorldSnapshot(global::UtinniCore.Utinni.WorldSnapshot.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected WorldSnapshot(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public WorldSnapshot()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshot.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public WorldSnapshot(global::UtinniCore.Utinni.WorldSnapshot _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.WorldSnapshot.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.WorldSnapshot.__Internal*) __Instance) = *((global::UtinniCore.Utinni.WorldSnapshot.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.WorldSnapshot __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void Load(string name)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, name);
                var __arg0 = __basicString0.__Instance;
                __Internal.Load(__arg0);
                __basicString0.Dispose();
            }

            public static void Unload()
            {
                __Internal.Unload();
            }

            public static void Reload()
            {
                __Internal.Reload();
            }

            public static void DetailLevelChanged()
            {
                __Internal.DetailLevelChanged();
            }

            public static void CreateNewNode(string objectFilename, global::UtinniCore.Swg.Math.Transform transform)
            {
                if (ReferenceEquals(transform, null))
                    throw new global::System.ArgumentNullException("transform", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = transform.__Instance;
                __Internal.CreateNewNode(objectFilename, __arg1);
            }

            public static void RemoveNode(global::UtinniCore.Utinni.WorldSnapshotReaderWriter.Node pNode)
            {
                var __arg0 = ReferenceEquals(pNode, null) ? global::System.IntPtr.Zero : pNode.__Instance;
                __Internal.RemoveNode(__arg0);
            }

            public static bool PreloadSnapshot
            {
                get
                {
                    var __ret = __Internal.GetPreloadSnapshot();
                    return __ret;
                }

                set
                {
                    __Internal.SetPreloadSnapshot(value);
                }
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class CuiManager : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CuiManager@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?setSize@CuiManager@utinni@@SAXHH@Z")]
                internal static extern void SetSize(int width, int height);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?togglePointer@CuiManager@utinni@@SAX_N@Z")]
                internal static extern void TogglePointer(bool isOn);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CuiManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CuiManager>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.CuiManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CuiManager(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.CuiManager __CreateInstance(global::UtinniCore.Utinni.CuiManager.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CuiManager(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.CuiManager.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CuiManager.__Internal));
                *(global::UtinniCore.Utinni.CuiManager.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private CuiManager(global::UtinniCore.Utinni.CuiManager.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected CuiManager(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public CuiManager()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CuiManager.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public CuiManager(global::UtinniCore.Utinni.CuiManager _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CuiManager.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.CuiManager.__Internal*) __Instance) = *((global::UtinniCore.Utinni.CuiManager.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.CuiManager __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void SetSize(int width, int height)
            {
                __Internal.SetSize(width, height);
            }

            public static void TogglePointer(bool isOn)
            {
                __Internal.TogglePointer(isOn);
            }
        }

        public unsafe partial class UiManager : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0UiManager@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?get@UiManager@utinni@@SAPAV12@XZ")]
                internal static extern global::System.IntPtr Get();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?drawCursor@UiManager@utinni@@QAEX_N@Z")]
                internal static extern void DrawCursor(global::System.IntPtr __instance, bool value);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.UiManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.UiManager>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.UiManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.UiManager(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.UiManager __CreateInstance(global::UtinniCore.Utinni.UiManager.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.UiManager(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.UiManager.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UiManager.__Internal));
                *(global::UtinniCore.Utinni.UiManager.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private UiManager(global::UtinniCore.Utinni.UiManager.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected UiManager(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public UiManager()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UiManager.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public UiManager(global::UtinniCore.Utinni.UiManager _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.UiManager.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.UiManager.__Internal*) __Instance) = *((global::UtinniCore.Utinni.UiManager.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.UiManager __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void DrawCursor(bool value)
            {
                __Internal.DrawCursor(__Instance, value);
            }

            public static global::UtinniCore.Utinni.UiManager Get()
            {
                var __ret = __Internal.Get();
                global::UtinniCore.Utinni.UiManager __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::UtinniCore.Utinni.UiManager.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::UtinniCore.Utinni.UiManager) global::UtinniCore.Utinni.UiManager.NativeToManagedMap[__ret];
                else __result0 = global::UtinniCore.Utinni.UiManager.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    namespace Memory
    {
        public unsafe partial class memory
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?write@memory@@YAXKPAXH@Z")]
                internal static extern void Write(uint address, global::System.IntPtr value, int length);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?set@memory@@YAXKKH@Z")]
                internal static extern void Set(uint address, uint value, int size);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?patchAddress@memory@@YAXKK@Z")]
                internal static extern void PatchAddress(uint address, uint value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?nopAddress@memory@@YAXKH@Z")]
                internal static extern void NopAddress(uint address, int nopCount);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?createJMP@memory@@YAXPAEKK@Z")]
                internal static extern void CreateJMP(byte* address, uint jumpToAddress, uint overrideLength);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getAddress@memory@@YAKKH@Z")]
                internal static extern uint GetAddress(uint baseAddress, int ptrDepth);
            }

            public static void Write(uint address, global::System.IntPtr value, int length)
            {
                __Internal.Write(address, value, length);
            }

            public static void Set(uint address, uint value, int size)
            {
                __Internal.Set(address, value, size);
            }

            public static void PatchAddress(uint address, uint value)
            {
                __Internal.PatchAddress(address, value);
            }

            public static void NopAddress(uint address, int nopCount)
            {
                __Internal.NopAddress(address, nopCount);
            }

            public static void CreateJMP(byte* address, uint jumpToAddress, uint overrideLength)
            {
                __Internal.CreateJMP(address, jumpToAddress, overrideLength);
            }

            public static uint GetAddress(uint baseAddress, int ptrDepth)
            {
                var __ret = __Internal.GetAddress(baseAddress, ptrDepth);
                return __ret;
            }
        }
    }

    namespace Utility
    {
        public unsafe partial class utility
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?showMessageBox@utility@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z")]
                internal static extern void ShowMessageBox(global::System.IntPtr title, global::System.IntPtr text);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?showMessageBox@utility@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
                internal static extern void ShowMessageBox(global::System.IntPtr text);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?showMessageBoxEmpty@utility@@YAXXZ")]
                internal static extern void ShowMessageBoxEmpty();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?showLastErrorMessageBox@utility@@YAXXZ")]
                internal static extern void ShowLastErrorMessageBox();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?getWorkingDirectory@utility@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                internal static extern void GetWorkingDirectory(global::System.IntPtr @return);
            }

            public static void ShowMessageBox(string title, string text)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, title);
                var __arg0 = __basicString0.__Instance;
                var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString1, text);
                var __arg1 = __basicString1.__Instance;
                __Internal.ShowMessageBox(__arg0, __arg1);
                __basicString0.Dispose();
                __basicString1.Dispose();
            }

            public static void ShowMessageBox(string text)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, text);
                var __arg0 = __basicString0.__Instance;
                __Internal.ShowMessageBox(__arg0);
                __basicString0.Dispose();
            }

            public static void ShowMessageBoxEmpty()
            {
                __Internal.ShowMessageBoxEmpty();
            }

            public static void ShowLastErrorMessageBox()
            {
                __Internal.ShowLastErrorMessageBox();
            }

            public static string GetWorkingDirectory()
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetWorkingDirectory(new IntPtr(&__ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }
        }
    }

    namespace Utinni
    {
        public unsafe partial class CollisionInfo : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr @object;

                [FieldOffset(4)]
                internal global::UtinniCore.Swg.Math.Vector.__Internal point;

                [FieldOffset(16)]
                internal global::UtinniCore.Swg.Math.Vector.__Internal normal;

                [FieldOffset(28)]
                internal float time;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CollisionInfo@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CollisionInfo@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CollisionInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.CollisionInfo>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.CollisionInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CollisionInfo(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.CollisionInfo __CreateInstance(global::UtinniCore.Utinni.CollisionInfo.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.CollisionInfo(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.CollisionInfo.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CollisionInfo.__Internal));
                *(global::UtinniCore.Utinni.CollisionInfo.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private CollisionInfo(global::UtinniCore.Utinni.CollisionInfo.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected CollisionInfo(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public CollisionInfo()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CollisionInfo.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public CollisionInfo(global::UtinniCore.Utinni.CollisionInfo _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.CollisionInfo.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance) = *((global::UtinniCore.Utinni.CollisionInfo.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.CollisionInfo __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public global::UtinniCore.Utinni.Object Object
            {
                get
                {
                    global::UtinniCore.Utinni.Object __result0;
                    if (((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->@object == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->@object))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->@object];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->@object);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.CollisionInfo.__Internal*)__Instance)->@object = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Vector Point
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->point));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.CollisionInfo.__Internal*)__Instance)->point = *(global::UtinniCore.Swg.Math.Vector.__Internal*) value.__Instance;
                }
            }

            public global::UtinniCore.Swg.Math.Vector Normal
            {
                get
                {
                    return global::UtinniCore.Swg.Math.Vector.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->normal));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.CollisionInfo.__Internal*)__Instance)->normal = *(global::UtinniCore.Swg.Math.Vector.__Internal*) value.__Instance;
                }
            }

            public float Time
            {
                get
                {
                    return ((global::UtinniCore.Utinni.CollisionInfo.__Internal*) __Instance)->time;
                }

                set
                {
                    ((global::UtinniCore.Utinni.CollisionInfo.__Internal*)__Instance)->time = value;
                }
            }
        }

        public unsafe partial class Controller : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal uint unk01;

                [FieldOffset(8)]
                internal uint unk02;

                [FieldOffset(12)]
                internal global::System.IntPtr ownerObject;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Controller@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Controller> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Controller>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Controller __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Controller(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Controller __CreateInstance(global::UtinniCore.Utinni.Controller.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Controller(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Controller.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Controller.__Internal));
                *(global::UtinniCore.Utinni.Controller.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Controller(global::UtinniCore.Utinni.Controller.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Controller(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Controller()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Controller.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Controller(global::UtinniCore.Utinni.Controller _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Controller.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Controller.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Controller.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Controller __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Controller.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public uint Unk01
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->unk01;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Controller.__Internal*)__Instance)->unk01 = value;
                }
            }

            public uint Unk02
            {
                get
                {
                    return ((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->unk02;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Controller.__Internal*)__Instance)->unk02 = value;
                }
            }

            public global::UtinniCore.Utinni.Object OwnerObject
            {
                get
                {
                    global::UtinniCore.Utinni.Object __result0;
                    if (((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->ownerObject == IntPtr.Zero) __result0 = null;
                    else if (global::UtinniCore.Utinni.Object.NativeToManagedMap.ContainsKey(((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->ownerObject))
                        __result0 = (global::UtinniCore.Utinni.Object) global::UtinniCore.Utinni.Object.NativeToManagedMap[((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->ownerObject];
                    else __result0 = global::UtinniCore.Utinni.Object.__CreateInstance(((global::UtinniCore.Utinni.Controller.__Internal*) __Instance)->ownerObject);
                    return __result0;
                }

                set
                {
                    ((global::UtinniCore.Utinni.Controller.__Internal*)__Instance)->ownerObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class DataResource : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr vtbl;

                [FieldOffset(4)]
                internal global::UtinniCore.Utinni.PersistentCrcString.__Internal name;

                [FieldOffset(20)]
                internal int referenceCount;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0DataResource@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.DataResource> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.DataResource>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.DataResource __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.DataResource(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.DataResource __CreateInstance(global::UtinniCore.Utinni.DataResource.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.DataResource(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.DataResource.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.DataResource.__Internal));
                *(global::UtinniCore.Utinni.DataResource.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private DataResource(global::UtinniCore.Utinni.DataResource.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected DataResource(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public DataResource()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.DataResource.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public DataResource(global::UtinniCore.Utinni.DataResource _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.DataResource.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.DataResource.__Internal*) __Instance) = *((global::UtinniCore.Utinni.DataResource.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.DataResource __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint* Vtbl
            {
                get
                {
                    return (uint*) ((global::UtinniCore.Utinni.DataResource.__Internal*) __Instance)->vtbl;
                }

                set
                {
                    ((global::UtinniCore.Utinni.DataResource.__Internal*)__Instance)->vtbl = (global::System.IntPtr) value;
                }
            }

            public global::UtinniCore.Utinni.PersistentCrcString Name
            {
                get
                {
                    return global::UtinniCore.Utinni.PersistentCrcString.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.DataResource.__Internal*) __Instance)->name));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::UtinniCore.Utinni.DataResource.__Internal*)__Instance)->name = *(global::UtinniCore.Utinni.PersistentCrcString.__Internal*) value.__Instance;
                }
            }

            public int ReferenceCount
            {
                get
                {
                    return ((global::UtinniCore.Utinni.DataResource.__Internal*) __Instance)->referenceCount;
                }

                set
                {
                    ((global::UtinniCore.Utinni.DataResource.__Internal*)__Instance)->referenceCount = value;
                }
            }
        }

        public unsafe partial class StringId : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 52)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C stringTable;

                [FieldOffset(24)]
                internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C text;

                [FieldOffset(48)]
                internal uint textIndex;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0StringId@utinni@@QAE@ABU01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0StringId@utinni@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1StringId@utinni@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr __instance, int delete);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.StringId> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.StringId>();

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.StringId __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.StringId(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.StringId __CreateInstance(global::UtinniCore.Utinni.StringId.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.StringId(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.StringId.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StringId.__Internal));
                global::UtinniCore.Utinni.StringId.__Internal.cctor(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private StringId(global::UtinniCore.Utinni.StringId.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected StringId(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public StringId(global::UtinniCore.Utinni.StringId _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StringId.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor(__Instance, __arg0);
            }

            public StringId()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.StringId.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.StringId __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor(__Instance, 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public string StringTable
            {
                get
                {
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.StringId.__Internal*) __Instance)->stringTable));
                    return global::Std.BasicStringExtensions.Data(__basicStringRet0);
                }

                set
                {
                    global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::UtinniCore.Utinni.StringId.__Internal*)__Instance)->stringTable), value);
                }
            }

            public string Text
            {
                get
                {
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::UtinniCore.Utinni.StringId.__Internal*) __Instance)->text));
                    return global::Std.BasicStringExtensions.Data(__basicStringRet0);
                }

                set
                {
                    global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::UtinniCore.Utinni.StringId.__Internal*)__Instance)->text), value);
                }
            }

            public uint TextIndex
            {
                get
                {
                    return ((global::UtinniCore.Utinni.StringId.__Internal*) __Instance)->textIndex;
                }

                set
                {
                    ((global::UtinniCore.Utinni.StringId.__Internal*)__Instance)->textIndex = value;
                }
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_int(global::System.IntPtr __instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_();

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr(global::System.IntPtr pThis);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_float(global::System.IntPtr pThis, float time);
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1K____N_utinni_S_WorldSnapshotReaderWriter_S_Node
        {
            [FieldOffset(0)]
            internal long first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_INI_S_Value
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(24)]
            internal global::UtinniCore.INI.Value.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_INI_S_Section
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(24)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_INI_S_Value_S0_
        {
            [FieldOffset(0)]
            internal global::UtinniCore.INI.Value.__Internal first;

            [FieldOffset(12)]
            internal global::UtinniCore.INI.Value.__Internal second;
        }
    }
}
