// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace UtinniCore
{
    namespace Utinni
    {
        public unsafe partial class Game : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0Game@utinni@@QAE@ABV01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?detour@Game@utinni@@SAXXZ")]
                internal static extern void Detour();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("UtinniCore", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?quit@Game@utinni@@SAXXZ")]
                internal static extern void Quit();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Game> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::UtinniCore.Utinni.Game>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::UtinniCore.Utinni.Game __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Game(native.ToPointer(), skipVTables);
            }

            internal static global::UtinniCore.Utinni.Game __CreateInstance(global::UtinniCore.Utinni.Game.__Internal native, bool skipVTables = false)
            {
                return new global::UtinniCore.Utinni.Game(native, skipVTables);
            }

            private static void* __CopyValue(global::UtinniCore.Utinni.Game.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                *(global::UtinniCore.Utinni.Game.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Game(global::UtinniCore.Utinni.Game.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Game(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Game()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public Game(global::UtinniCore.Utinni.Game _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::UtinniCore.Utinni.Game.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::UtinniCore.Utinni.Game.__Internal*) __Instance) = *((global::UtinniCore.Utinni.Game.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::UtinniCore.Utinni.Game __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static void Detour()
            {
                __Internal.Detour();
            }

            public static void Quit()
            {
                __Internal.Quit();
            }
        }
    }
}
